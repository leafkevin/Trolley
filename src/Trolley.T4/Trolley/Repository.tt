<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;

namespace Trolley;

public class Repository : IRepository
{
    #region 字段
    protected bool isParameterized = false;
    protected TheaConnection connection;
    #endregion

    #region 属性
    public string DbKey { get; private set; }    
    public IOrmProvider OrmProvider { get; private set; }
    public IEntityMapProvider MapProvider { get; private set; }
    public IDbConnection Connection => this.connection;
    public IDbTransaction Transaction { get; private set; }
    #endregion

    #region 构造方法
    public Repository(string dbKey, IDbConnection connection, IOrmProvider ormProvider, IEntityMapProvider entityMapProvider)
    {
        this.DbKey = dbKey;
        this.connection = new TheaConnection { DbKey = dbKey, BaseConnection = connection };
        this.OrmProvider = ormProvider;
        this.MapProvider = entityMapProvider;
    }
    public Repository(TheaConnection connection, IOrmProvider ormProvider, IEntityMapProvider entityMapProvider)
    {
        this.DbKey = connection.DbKey;
        this.connection = connection;
        this.OrmProvider = ormProvider;
        this.MapProvider = entityMapProvider;
    }
    #endregion

    #region Query
    public IQuery<T> From<T>(char tableAsStart = 'a', string suffixRawSql = null)
    {
        var visitor = this.OrmProvider.NewQueryVisitor(this.DbKey, this.MapProvider, this.isParameterized, tableAsStart);
        visitor.From(tableAsStart, typeof(T), suffixRawSql);
        return new Query<T>(this.connection, this.Transaction, visitor);
    }
    public IQuery<T> From<T>(Func<IFromQuery, IFromQuery<T>> subQuery, char tableAsStart = 'a')
    {
        var visitor = this.OrmProvider.NewQueryVisitor(this.DbKey, this.MapProvider, this.isParameterized, tableAsStart, "p1w");
        subQuery.Invoke(new FromQuery(visitor));
        var sql = visitor.BuildSql(out var dbDataParameters, out var readerFields);
        var newVisitor = visitor.Clone(tableAsStart);
        newVisitor.WithTable(typeof(T), sql, dbDataParameters, readerFields);
        return new Query<T>(this.connection, this.Transaction, newVisitor);
    }
    public IQuery<T> FromWith<T>(Func<IFromQuery, IFromQuery<T>> cteSubQuery, string cteTableName = "cte", char tableAsStart = 'a')
    {
        var visitor = this.OrmProvider.NewQueryVisitor(this.DbKey, this.MapProvider, this.isParameterized, tableAsStart, "p1w");
        cteSubQuery.Invoke(new FromQuery(visitor));
        var rawSql = visitor.BuildSql(out var dbDataParameters, out var readerFields);
        var newVisitor = visitor.Clone(tableAsStart);
        newVisitor.WithCteTable(typeof(T), cteTableName, false, rawSql, dbDataParameters, readerFields);
        return new Query<T>(this.connection, this.Transaction, newVisitor);
    }
    public IQuery<T> FromWithRecursive<T>(Func<IFromQuery, string, IFromQuery<T>> cteSubQuery, string cteTableName = "cte", char tableAsStart = 'a')
    {
        var visitor = this.OrmProvider.NewQueryVisitor(this.DbKey, this.MapProvider, this.isParameterized, tableAsStart, "p1w");
        cteSubQuery.Invoke(new FromQuery(visitor), cteTableName);
        var rawSql = visitor.BuildSql(out var dbDataParameters, out var readerFields);
        var newVisitor = visitor.Clone(tableAsStart);
        newVisitor.WithCteTable(typeof(T), cteTableName, true, rawSql, dbDataParameters, readerFields);
        return new Query<T>(this.connection, this.Transaction, newVisitor);
    }
<#
    var count = 10;
    var tables = "T1";
    var typeOfTables = "typeof(T1)";
    for (int i = 2; i <= count; i++)
    {
        tables += $", T{i}";
        typeOfTables += $", typeof(T{i})";
#>
    public IQuery<<#=tables#>> From<<#=tables#>>(char tableAsStart = 'a')
    {
        var visitor = this.OrmProvider.NewQueryVisitor(this.DbKey, this.MapProvider, this.IsParameterized, tableAsStart);
        visitor.From(tableAsStart, <#=typeOfTables#>);
        return new Query<<#=tables#>>(this, visitor);
    }
<#  }#>
    
