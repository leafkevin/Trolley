<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<#@ output extension=".cs" #>
using System;
using System.Linq.Expressions;

namespace Trolley.PostgreSql;

public class PostgreSqlGroupingQuery<T, TGrouping> : GroupingQuery<T, TGrouping>, IPostgreSqlGroupingQuery<T, TGrouping>
{
    #region Constructor
    public PostgreSqlGroupingQuery(DbContext dbContext, IQueryVisitor visitor)
        : base(dbContext, visitor) { }
    #endregion

    #region Having
    public override IPostgreSqlGroupingQuery<T, TGrouping> Having(Expression<Func<IGroupingAggregate<TGrouping>, T, bool>> predicate)
        => this.Having(true, predicate);
    public override IPostgreSqlGroupingQuery<T, TGrouping> Having(bool condition, Expression<Func<IGroupingAggregate<TGrouping>, T, bool>> predicate)
        => base.Having(condition, predicate) as IPostgreSqlGroupingQuery<T, TGrouping>;
    #endregion

    #region OrderBy/OrderByDescending
    public override IPostgreSqlGroupingQuery<T, TGrouping> OrderBy<TFields>(Expression<Func<IGroupingAggregate<TGrouping>, T, TFields>> fieldsExpr)
        => this.OrderBy(true, fieldsExpr);
    public override IPostgreSqlGroupingQuery<T, TGrouping> OrderBy<TFields>(bool condition, Expression<Func<IGroupingAggregate<TGrouping>, T, TFields>> fieldsExpr)
        => base.OrderBy(condition, fieldsExpr) as IPostgreSqlGroupingQuery<T, TGrouping>;
    public override IPostgreSqlGroupingQuery<T, TGrouping> OrderByDescending<TFields>(Expression<Func<IGroupingAggregate<TGrouping>, T, TFields>> fieldsExpr)
        => this.OrderByDescending(true, fieldsExpr);
    public override IPostgreSqlGroupingQuery<T, TGrouping> OrderByDescending<TFields>(bool condition, Expression<Func<IGroupingAggregate<TGrouping>, T, TFields>> fieldsExpr)
        => base.OrderByDescending(condition, fieldsExpr) as IPostgreSqlGroupingQuery<T, TGrouping>;
    #endregion

    #region Select
    public override IPostgreSqlQuery<TGrouping> Select()
        => base.Select() as IPostgreSqlQuery<TGrouping>;
    public override IPostgreSqlQuery<TTarget> Select<TTarget>(string fields = "*")
        => base.Select<TTarget>("*") as IPostgreSqlQuery<TTarget>;
    public override IPostgreSqlQuery<TTarget> Select<TTarget>(Expression<Func<IGroupingAggregate<TGrouping>, T, TTarget>> fieldsExpr)
        => base.Select(fieldsExpr) as IPostgreSqlQuery<TTarget>;
    #endregion
}
<#
    var count = 16;
    var tables = "T1";
    for (int i = 2; i <= count; i++)
    {
        tables += $", T{i}";
#>
public class PostgreSqlGroupingQuery<<#=tables#>, TGrouping> : GroupingQuery<<#=tables#>, TGrouping>, IPostgreSqlGroupingQuery<<#=tables#>, TGrouping>
{
    #region Constructor
    public PostgreSqlGroupingQuery(DbContext dbContext, IQueryVisitor visitor)
        : base(dbContext, visitor) { }
    #endregion
<#
        if( i < count)
        {
#>

    #region Having
    public override IPostgreSqlGroupingQuery<<#=tables#>, TGrouping> Having(Expression<Func<IGroupingAggregate<TGrouping>, <#=tables#>, bool>> predicate)
        => this.Having(true, predicate);
    public override IPostgreSqlGroupingQuery<<#=tables#>, TGrouping> Having(bool condition, Expression<Func<IGroupingAggregate<TGrouping>, <#=tables#>, bool>> predicate)
        => base.Having(condition, predicate) as IPostgreSqlGroupingQuery<<#=tables#>, TGrouping>;
    #endregion

    #region OrderBy/OrderByDescending
    public override IPostgreSqlGroupingQuery<<#=tables#>, TGrouping> OrderBy<TFields>(Expression<Func<IGroupingAggregate<TGrouping>, <#=tables#>, TFields>> fieldsExpr)
        => this.OrderBy(true, fieldsExpr);
    public override IPostgreSqlGroupingQuery<<#=tables#>, TGrouping> OrderBy<TFields>(bool condition, Expression<Func<IGroupingAggregate<TGrouping>, <#=tables#>, TFields>> fieldsExpr)
        => base.OrderBy(condition, fieldsExpr) as IPostgreSqlGroupingQuery<<#=tables#>, TGrouping>;
    public override IPostgreSqlGroupingQuery<<#=tables#>, TGrouping> OrderByDescending<TFields>(Expression<Func<IGroupingAggregate<TGrouping>, <#=tables#>, TFields>> fieldsExpr)
        => this.OrderByDescending(true, fieldsExpr);
    public override IPostgreSqlGroupingQuery<<#=tables#>, TGrouping> OrderByDescending<TFields>(bool condition, Expression<Func<IGroupingAggregate<TGrouping>, <#=tables#>, TFields>> fieldsExpr)
        => base.OrderByDescending(condition, fieldsExpr) as IPostgreSqlGroupingQuery<<#=tables#>, TGrouping>;
    #endregion

    #region Select
    public override IPostgreSqlQuery<TGrouping> Select()
        => base.Select() as IPostgreSqlQuery<TGrouping>;
    public override IPostgreSqlQuery<TTarget> Select<TTarget>(string fields = "*")
        => base.Select<TTarget>("*") as IPostgreSqlQuery<TTarget>;
    public override IPostgreSqlQuery<TTarget> Select<TTarget>(Expression<Func<IGroupingAggregate<TGrouping>, <#=tables#>, TTarget>> fieldsExpr)
        => base.Select(fieldsExpr) as IPostgreSqlQuery<TTarget>;
    #endregion
<#      }#>
}
<#  }#>