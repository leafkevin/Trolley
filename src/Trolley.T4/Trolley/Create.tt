<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<#@ output extension=".cs" #>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace Trolley;

public class Create<TEntity> : ICreate<TEntity>
{
    #region Properties
    public DbContext DbContext { get; protected set; }
    public ICreateVisitor Visitor { get; protected set; }
    public IOrmProvider OrmProvider => this.DbContext.OrmProvider;
    #endregion

    #region Constructor
    public Create(DbContext dbContext)
    {
        this.DbContext = dbContext;
        this.Visitor = this.DbContext.OrmProvider.NewCreateVisitor(dbContext.DbKey, this.DbContext.MapProvider, this.DbContext.IsParameterized);
        this.Visitor.Initialize(typeof(TEntity));
        this.DbContext = dbContext;
    }
    #endregion

    #region Sharding
    public ICreate<TEntity> UseTable(params string[] tableNames)
    {
        var entityType = typeof(TEntity);
        this.Visitor.UseTable(entityType, tableNames);
        return this;
    }
    public ICreate<TEntity> UseTable(Func<string, bool> tableNamePredicate)
    {
        var entityType = typeof(TEntity);
        this.Visitor.UseTable(entityType, tableNamePredicate);
        return this;
    }
    public ICreate<TEntity> UseTableBy(object field1Value, object field2Value = null)
    {
        var entityType = typeof(TEntity);
        this.Visitor.UseTableBy(entityType, field1Value, field2Value);
        return this;
    }
    public ICreate<TEntity> UseTableByRange(object beginFieldValue, object endFieldValue)
    {
        var entityType = typeof(TEntity);
        this.Visitor.UseTableByRange(entityType, beginFieldValue, endFieldValue);
        return this;
    }
    public ICreate<TEntity> UseTableByRange(object fieldValue1, object fieldValue2, object fieldValue3)
    {
        var entityType = typeof(TEntity);
        this.Visitor.UseTableByRange(entityType, fieldValue1, fieldValue2, fieldValue3);
        return this;
    }
    #endregion

    #region WithBy
    public IContinuedCreate<TEntity> WithBy<TInsertObject>(TInsertObject insertObj)
    {
        if (insertObj == null)
            throw new ArgumentNullException(nameof(insertObj));
        if (insertObj is IEnumerable && insertObj is not string && insertObj is not IDictionary<string, object>)
            throw new NotSupportedException("只能插入单个实体，批量插入请使用WithBulk方法");

        this.Visitor.WithBy(insertObj);
        return new ContinuedCreate<TEntity>(this.DbContext, this.Visitor);
    }
    #endregion

    #region WithBulk
    public IContinuedCreate<TEntity> WithBulk(IEnumerable insertObjs, int bulkCount = 500)
    {
        if (insertObjs == null)
            throw new ArgumentNullException(nameof(insertObjs));

        if (insertObjs is string || insertObjs is IDictionary<string, object>)
            throw new NotSupportedException("批量插入，单个对象类型只支持命名对象、匿名对象或是字典对象");

        this.Visitor.WithBulk(insertObjs, bulkCount);
        return new ContinuedCreate<TEntity>(this.DbContext, this.Visitor);
    }
    #endregion

    #region From
    public IFromCommand<T> From<T>()
    {
        var queryVisitor = this.Visitor.CreateQueryVisitor();
        queryVisitor.From('b', null, typeof(T));
        return this.OrmProvider.NewFromCommand<T>(typeof(TEntity), this.DbContext, queryVisitor);
    }
<#
    var count = 7;
    var tables = "T1";
    var typeOfTables = "typeof(T1)";
    for (int i = 2; i < count; i++)
    {
        tables += $", T{i}";
        typeOfTables += $", typeof(T{i})";
#>
    public IFromCommand<<#=tables#>> From<<#=tables#>>()
    {
        var queryVisitor = this.Visitor.CreateQueryVisitor();
        queryVisitor.From('b', null, <#=typeOfTables#>);
        return this.OrmProvider.NewFromCommand<<#=tables#>>(typeof(TEntity), this.DbContext, queryVisitor);
    }
<#  }#>

    public IFromCommand<TTarget> From<TTarget>(IQuery<TTarget> subQuery)
    {
        var queryVisitor = this.Visitor.CreateQueryVisitor();
        queryVisitor.From(typeof(TTarget), subQuery);
        return this.OrmProvider.NewFromCommand<TTarget>(typeof(TEntity), this.DbContext, queryVisitor);
    }
    public IFromCommand<TTarget> From<TTarget>(Func<IFromQuery, IQuery<TTarget>> cteSubQuery)
    {
        var queryVisitor = this.Visitor.CreateQueryVisitor();
        queryVisitor.From(typeof(TTarget), this.DbContext, cteSubQuery);
        return this.OrmProvider.NewFromCommand<TTarget>(typeof(TEntity), this.DbContext, queryVisitor);
    }
    #endregion

    #region ExecuteBulkCopy
    public virtual int ExecuteBulkCopy(IEnumerable<TEntity> insertObjs, int? bulkCopyTimeout = null) => 0;
    public virtual Task<int> ExecuteBulkCopyAsync(IEnumerable<TEntity> insertObjs, int? bulkCopyTimeout = null, CancellationToken cancellationToken = default) => Task.FromResult(0);
    #endregion
}
public class Created<TEntity> : ICreated<TEntity>
{
    #region Properties
    public DbContext DbContext { get; protected set; }
    public ICreateVisitor Visitor { get; protected set; }
    #endregion

    #region Constructor
    public Created(DbContext dbContext, ICreateVisitor visitor)
    {
        this.DbContext = dbContext;
        this.Visitor = visitor;
    }
    #endregion

    #region Execute
    public virtual int Execute()
    {
        int result = 0;
        Exception exception = null;
        bool isNeedClose = this.DbContext.IsNeedClose;
        using var command = this.DbContext.CreateCommand();
        try
        {
            switch (this.Visitor.ActionMode)
            {
                case ActionMode.Bulk:
                    int index = 0;
                    bool isFirst = true;
                    var sqlBuilder = new StringBuilder();
                    (var insertObjs, var bulkCount, var headSqlSetter, var commandInitializer) = this.Visitor.BuildWithBulk(command);
                    headSqlSetter.Invoke(sqlBuilder);

                    foreach (var insertObj in insertObjs)
                    {
                        if (index > 0) sqlBuilder.Append(',');
                        commandInitializer.Invoke(sqlBuilder, insertObj, index.ToString());
                        if (index >= bulkCount)
                        {
                            command.CommandText = sqlBuilder.ToString();
                            if (isFirst)
                            {
                                this.DbContext.Open();
                                isFirst = false;
                            }
                            result += command.ExecuteNonQuery();
                            command.Parameters.Clear();
                            sqlBuilder.Clear();
                            headSqlSetter.Invoke(sqlBuilder);
                            index = 0;
                            continue;
                        }
                        index++;
                    }
                    if (index > 0)
                    {
                        command.CommandText = sqlBuilder.ToString();
                        if (isFirst) this.DbContext.Open();
                        result += command.ExecuteNonQuery();
                    }
                    sqlBuilder.Clear();
                    sqlBuilder = null;
                    break;
                default:
                    //默认单条
                    command.CommandText = this.Visitor.BuildCommand(command, false);
                    this.DbContext.Open();
                    result = command.ExecuteNonQuery();
                    break;
            }
        }
        catch (Exception ex)
        {
            isNeedClose = true;
            exception = ex;
        }
        finally
        {
            command.Dispose();
            if (isNeedClose) this.Close();
        }
        if (exception != null) throw exception;
        return result;
    }
    public virtual async Task<int> ExecuteAsync(CancellationToken cancellationToken = default)
    {
        int result = 0;
        Exception exception = null;
        bool isNeedClose = this.DbContext.IsNeedClose;
        using var command = this.DbContext.CreateDbCommand();
        try
        {
            switch (this.Visitor.ActionMode)
            {
                case ActionMode.Bulk:
                    int index = 0;
                    bool isFirst = true;
                    var sqlBuilder = new StringBuilder();
                    (var insertObjs, var bulkCount, var headSqlSetter, var commandInitializer) = this.Visitor.BuildWithBulk(command);
                    headSqlSetter.Invoke(sqlBuilder);
                    foreach (var insertObj in insertObjs)
                    {
                        if (index > 0) sqlBuilder.Append(',');
                        commandInitializer.Invoke(sqlBuilder, insertObj, index.ToString());
                        if (index >= bulkCount)
                        {
                            command.CommandText = sqlBuilder.ToString();
                            if (isFirst)
                            {
                                await this.DbContext.OpenAsync(cancellationToken);
                                isFirst = false;
                            }
                            result += await command.ExecuteNonQueryAsync(cancellationToken);
                            command.Parameters.Clear();
                            sqlBuilder.Clear();
                            headSqlSetter.Invoke(sqlBuilder);
                            index = 0;
                            continue;
                        }
                        index++;
                    }
                    if (index > 0)
                    {
                        command.CommandText = sqlBuilder.ToString();
                        if (isFirst) await this.DbContext.OpenAsync(cancellationToken);
                        result += await command.ExecuteNonQueryAsync(cancellationToken);
                    }
                    sqlBuilder.Clear();
                    sqlBuilder = null;
                    break;
                default:
                    //默认单条
                    command.CommandText = this.Visitor.BuildCommand(command, false);
                    await this.DbContext.OpenAsync(cancellationToken);
                    result = await command.ExecuteNonQueryAsync(cancellationToken);
                    break;
            }
        }
        catch (Exception ex)
        {
            isNeedClose = true;
            exception = ex;
        }
        finally
        {
            await command.DisposeAsync();
            if (isNeedClose) await this.CloseAsync();
        }
        if (exception != null) throw exception;
        return result;
    }
    #endregion

    #region ExecuteIdentity
    public int ExecuteIdentity()
    {
        var result = this.DbContext.CreateIdentity<int>(f => f.CommandText = this.Visitor.BuildCommand(f, true));
        this.Visitor.Dispose();
        this.Visitor = null;
        return result;
    }
    public async Task<int> ExecuteIdentityAsync(CancellationToken cancellationToken = default)
    {
        var result = await this.DbContext.CreateIdentityAsync<int>(f => f.CommandText = this.Visitor.BuildCommand(f, true), cancellationToken);
        this.Visitor.Dispose();
        this.Visitor = null;
        return result;
    }
    public long ExecuteIdentityLong()
    {
        var result = this.DbContext.CreateIdentity<long>(f => f.CommandText = this.Visitor.BuildCommand(f, true));
        this.Visitor.Dispose();
        this.Visitor = null;
        return result;
    }
    public async Task<long> ExecuteIdentityLongAsync(CancellationToken cancellationToken = default)
    {
        var result = await this.DbContext.CreateIdentityAsync<long>(f => f.CommandText = this.Visitor.BuildCommand(f, true), cancellationToken);
        this.Visitor.Dispose();
        this.Visitor = null;
        return result;
    }
    #endregion

    #region ToMultipleCommand
    public MultipleCommand ToMultipleCommand()
    {
        var result = this.Visitor.CreateMultipleCommand();
        this.Visitor.Dispose();
        this.Visitor = null;
        return result;
    }
    #endregion

    #region ToSql
    public string ToSql(out List<IDbDataParameter> dbParameters)
    {
        dbParameters = null;
        string sql = null;
        using var command = this.DbContext.CreateCommand();
        switch (this.Visitor.ActionMode)
        {
            case ActionMode.Single:
                sql = this.Visitor.BuildCommand(command, false);
                break;
            case ActionMode.Bulk:
                int index = 0;
                var sqlBuilder = new StringBuilder();
                (var insertObjs, var bulkCount, var headSqlSetter, var commandInitializer) = this.Visitor.BuildWithBulk(command);
                headSqlSetter.Invoke(sqlBuilder);

                foreach (var insertObj in insertObjs)
                {
                    if (index > 0) sqlBuilder.Append(',');
                    commandInitializer.Invoke(sqlBuilder, insertObj, index.ToString());
                    if (index >= bulkCount)
                    {
                        sql = sqlBuilder.ToString();
                        index = 0;
                        break;
                    }
                    index++;
                }
                if (index > 0) sql = sqlBuilder.ToString();
                sqlBuilder.Clear();
                break;
        }
        dbParameters = command.Parameters.Cast<IDbDataParameter>().ToList();
        command.Dispose();
        return sql;
    }
    #endregion

    #region Close
    public void Close()
    {
        this.DbContext.Close();
        this.Visitor.Dispose();
        this.Visitor = null;
    }
    public async ValueTask CloseAsync()
    {
        await this.DbContext.CloseAsync();
        this.Visitor.Dispose();
        this.Visitor = null;
    }
    #endregion
}
public class ContinuedCreate<TEntity> : Created<TEntity>, IContinuedCreate<TEntity>
{
    #region Constructor
    public ContinuedCreate(DbContext dbContext, ICreateVisitor visitor)
        : base(dbContext, visitor) { }
    #endregion

    #region WithBy
    public IContinuedCreate<TEntity> WithBy<TInsertObject>(TInsertObject insertObj)
        => this.WithBy(true, insertObj);
    public IContinuedCreate<TEntity> WithBy<TInsertObject>(bool condition, TInsertObject insertObj)
    {
        if (insertObj == null)
            throw new ArgumentNullException(nameof(insertObj));
        if (insertObj is IEnumerable && insertObj is not string && insertObj is not IDictionary<string, object>)
            throw new NotSupportedException("只能插入单个实体，批量插入请使用WithBulkBy方法");
        if (!typeof(TInsertObject).IsEntityType(out _))
            throw new NotSupportedException("方法WithBy<TInsertObject>(TInsertObject insertObj)只支持类对象参数，不支持基础类型参数");

        if (condition) this.Visitor.WithBy(insertObj);
        return this;
    }
    public IContinuedCreate<TEntity> WithBy<TField>(Expression<Func<TEntity, TField>> fieldSelector, TField fieldValue)
        => this.WithBy(true, fieldSelector, fieldValue);
    public IContinuedCreate<TEntity> WithBy<TField>(bool condition, Expression<Func<TEntity, TField>> fieldSelector, TField fieldValue)
    {
        if (fieldSelector == null)
            throw new ArgumentNullException(nameof(fieldSelector));

        if (condition) this.Visitor.WithByField(fieldSelector, fieldValue);
        return this;
    }
    #endregion

    #region IgnoreFields
    public IContinuedCreate<TEntity> IgnoreFields(params string[] fieldNames)
    {
        if (fieldNames == null)
            throw new ArgumentNullException(nameof(fieldNames));

        this.Visitor.IgnoreFields(fieldNames);
        return this;
    }
    public IContinuedCreate<TEntity> IgnoreFields<TFields>(Expression<Func<TEntity, TFields>> fieldsSelector)
    {
        if (fieldsSelector == null)
            throw new ArgumentNullException(nameof(fieldsSelector));
        if (fieldsSelector.Body.NodeType != ExpressionType.New && fieldsSelector.Body.NodeType != ExpressionType.MemberInit)
            throw new NotSupportedException($"不支持的表达式{nameof(fieldsSelector)},只支持New或MemberInit类型表达式");

        this.Visitor.IgnoreFields(fieldsSelector);
        return this;
    }
    #endregion

    #region OnlyFields
    public IContinuedCreate<TEntity> OnlyFields(params string[] fieldNames)
    {
        if (fieldNames == null)
            throw new ArgumentNullException(nameof(fieldNames));

        this.Visitor.OnlyFields(fieldNames);
        return this;
    }
    public IContinuedCreate<TEntity> OnlyFields<TFields>(Expression<Func<TEntity, TFields>> fieldsSelector)
    {
        if (fieldsSelector == null)
            throw new ArgumentNullException(nameof(fieldsSelector));
        if (fieldsSelector.Body.NodeType != ExpressionType.New && fieldsSelector.Body.NodeType != ExpressionType.MemberInit)
            throw new NotSupportedException($"不支持的表达式{nameof(fieldsSelector)},只支持New或MemberInit类型表达式");

        this.Visitor.OnlyFields(fieldsSelector);
        return this;
    }
    #endregion
}