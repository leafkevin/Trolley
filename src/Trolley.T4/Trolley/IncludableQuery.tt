<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq.Expressions;

namespace Trolley;

class IncludableQuery<T, TMember> : Query<T>, IIncludableQuery<T, TMember>
{
    #region Constructor
    public IncludableQuery(TheaConnection connection, IOrmProvider ormProvider, IEntityMapProvider mapProvider, IQueryVisitor visitor)
        : base(connection, ormProvider, mapProvider, visitor) { }
    #endregion

    #region ThenInclude/ThenIncludeMany
    public IIncludableQuery<T, TNavigation> ThenInclude<TNavigation>(Expression<Func<TMember, TNavigation>> member)
    {
        this.visitor.ThenInclude(member);
        return new IncludableQuery<T, TNavigation>(this.connection, this.ormProvider, this.mapProvider, this.visitor);
    }
    public IIncludableQuery<T, TElment> ThenIncludeMany<TElment>(Expression<Func<TMember, IEnumerable<TElment>>> member, Expression<Func<TElment, bool>> filter = null)
    {
        this.visitor.ThenInclude(member, true, filter);
        return new IncludableQuery<T, TElment>(this.connection, this.ormProvider, this.mapProvider, this.visitor);
    }
    #endregion
}
<#
    var count = 16;
    var tables = "T1";
    for (int i = 2; i < count; i++)
    {
        tables += $", T{i}";
#>
class IncludableQuery<<#=tables#>, TMember> : Query<<#=tables#>>, IIncludableQuery<<#=tables#>, TMember>
{
    #region Constructor
    public IncludableQuery(TheaConnection connection, IOrmProvider ormProvider, IEntityMapProvider mapProvider, IQueryVisitor visitor)
        : base(connection, ormProvider, mapProvider, visitor) { }
    #endregion
<#
        if( i < count - 1)
        {
#>

    #region ThenInclude/ThenIncludeMany
    public IIncludableQuery<<#=tables#>, TNavigation> ThenInclude<TNavigation>(Expression<Func<TMember, TNavigation>> member)
    {
        this.visitor.ThenInclude(member);
        return new IncludableQuery<<#=tables#>, TNavigation>(this.connection, this.ormProvider, this.mapProvider, this.visitor);
    }
    public IIncludableQuery<<#=tables#>, TElment> ThenIncludeMany<TElment>(Expression<Func<TMember, IEnumerable<TElment>>> member, Expression<Func<TElment, bool>> filter = null)
    {
        this.visitor.ThenInclude(member, true, filter);
        return new IncludableQuery<<#=tables#>, TElment>(this.connection, this.ormProvider, this.mapProvider, this.visitor);
    }
    #endregion
<#      }#>
}
<#  }#>