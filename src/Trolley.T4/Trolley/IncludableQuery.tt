<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq.Expressions;

namespace Trolley;

public class IncludableQuery<T, TMember> : Query<T>, IIncludableQuery<T, TMember>
{
    #region Constructor
    public IncludableQuery(DbContext dbContext, IQueryVisitor visitor)
        : base(dbContext, visitor) { }
    #endregion

    #region Sharding
    public new IIncludableQuery<T, TMember> UseTable(params string[] tableNames)
    {
        var entityType = typeof(TMember);
        this.Visitor.UseTable(entityType, tableNames);
        return this;
    }
    public new IIncludableQuery<T, TMember> UseTable(Func<string, bool> tableNamePredicate)
    {
        var entityType = typeof(TMember);
        this.Visitor.UseTable(entityType, tableNamePredicate);
        return this;
    }
    public IIncludableQuery<T, TMember> UseTable<TMasterSharding>(Func<string, string, string, string, string> tableNameGetter)
    {
        var entityType = typeof(TMember);
        var masterEntityType = typeof(TMasterSharding);
        this.Visitor.UseTable(entityType, masterEntityType, tableNameGetter);
        return this;
    }
    public new IIncludableQuery<T, TMember> UseTableBy(object field1Value, object field2Value = null)
    {
        var entityType = typeof(TMember);
        this.Visitor.UseTableBy(entityType, field1Value, field2Value);
        return this;
    }
    public new IIncludableQuery<T, TMember> UseTableByRange(object beginFieldValue, object endFieldValue)
    {
        var entityType = typeof(TMember);
        this.Visitor.UseTableByRange(entityType, beginFieldValue, endFieldValue);
        return this;
    }
    public new IIncludableQuery<T, TMember> UseTableByRange(object fieldValue1, object fieldValue2, object fieldValue3)
    {
        var entityType = typeof(TMember);
        this.Visitor.UseTableByRange(entityType, fieldValue1, fieldValue2, fieldValue3);
        return this;
    }
    #endregion

    #region ThenInclude/ThenIncludeMany
    public IIncludableQuery<T, TNavigation> ThenInclude<TNavigation>(Expression<Func<TMember, TNavigation>> member)
    {
        this.Visitor.ThenInclude(member);
        return this.OrmProvider.NewIncludableQuery<T, TNavigation>(this.DbContext, this.Visitor);
    }
    public IIncludableQuery<T, TElment> ThenIncludeMany<TElment>(Expression<Func<TMember, IEnumerable<TElment>>> member, Expression<Func<TElment, bool>> filter = null)
    {
        this.Visitor.ThenInclude(member, true, filter);
        return this.OrmProvider.NewIncludableQuery<T, TElment>(this.DbContext, this.Visitor);
    }
    #endregion
}
<#
    var count = 16;
    var tables = "T1";
    for (int i = 2; i <= count; i++)
    {
        tables += $", T{i}";
#>
public class IncludableQuery<<#=tables#>, TMember> : Query<<#=tables#>>, IIncludableQuery<<#=tables#>, TMember>
{
    #region Constructor
    public IncludableQuery(DbContext dbContext, IQueryVisitor visitor)
        : base(dbContext, visitor) { }
    #endregion

<#
        if( i < count)
        {
#>
    #region Sharding
    public new IIncludableQuery<<#=tables#>, TMember> UseTable(params string[] tableNames)
    {
        var entityType = typeof(TMember);
        this.Visitor.UseTable(entityType, tableNames);
        return this;
    }
    public new IIncludableQuery<<#=tables#>, TMember> UseTable(Func<string, bool> tableNamePredicate)
    {
        var entityType = typeof(TMember);
        this.Visitor.UseTable(entityType, tableNamePredicate);
        return this;
    }
    public new IIncludableQuery<<#=tables#>, TMember> UseTable<TMasterSharding>(Func<string, string, string, string, string> tableNameGetter)
    {
        var entityType = typeof(TMember);
        var masterEntityType = typeof(TMasterSharding);
        this.Visitor.UseTable(entityType, masterEntityType, tableNameGetter);
        return this;
    }
    public new IIncludableQuery<<#=tables#>, TMember> UseTableBy(object field1Value, object field2Value = null)
    {
        var entityType = typeof(TMember);
        this.Visitor.UseTableBy(entityType, field1Value, field2Value);
        return this;
    }
    public new IIncludableQuery<<#=tables#>, TMember> UseTableByRange(object beginFieldValue, object endFieldValue)
    {
        var entityType = typeof(TMember);
        this.Visitor.UseTableByRange(entityType, beginFieldValue, endFieldValue);
        return this;
    }
    public new IIncludableQuery<<#=tables#>, TMember> UseTableByRange(object fieldValue1, object fieldValue2, object fieldValue3)
    {
        var entityType = typeof(TMember);
        this.Visitor.UseTableByRange(entityType, fieldValue1, fieldValue2, fieldValue3);
        return this;
    }
    #endregion

    #region ThenInclude/ThenIncludeMany
    public IIncludableQuery<<#=tables#>, TNavigation> ThenInclude<TNavigation>(Expression<Func<TMember, TNavigation>> member)
    {
        this.Visitor.ThenInclude(member);
        return this.OrmProvider.NewIncludableQuery<<#=tables#>, TNavigation>(this.DbContext, this.Visitor);
    }
    public IIncludableQuery<<#=tables#>, TElment> ThenIncludeMany<TElment>(Expression<Func<TMember, IEnumerable<TElment>>> member, Expression<Func<TElment, bool>> filter = null)
    {
        this.Visitor.ThenInclude(member, true, filter);
        return this.OrmProvider.NewIncludableQuery<<#=tables#>, TElment>(this.DbContext, this.Visitor);
    }
    #endregion
<#      }#>
}
<#  }#>