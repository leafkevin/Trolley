<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq.Expressions;

namespace Trolley;

/// <summary>
/// 匿名查询对象
/// </summary>
public interface IQueryAnonymousObject
{
    #region ToSql
    /// <summary>
    /// 返回当前查询的SQL和参数列表
    /// </summary>
    /// <param name="dbParameters">参数列表</param>
    /// <returns>当前查询的SQL</returns>
    string ToSql(out List<IDbDataParameter> dbParameters);
    #endregion
}
/// <summary>
/// 查询对象
/// </summary>
public interface IFromQueryBase
{
    #region Select
    /// <summary>
    /// 使用原始字段返回匿名查询结果，主要用在不关注结果类型的地方，比如：Sql.Exists语句，用于判断数据是否存在，用法：Select("*") 或是 Select("1")，
    /// </summary>
    /// <param name="fields">原始字段字符串，默认值*</param>
    /// <returns>返回匿名查询对象</returns>
    IQueryAnonymousObject Select(string fields = "*");
    /// <summary>
    /// 使用原始字段返回查询结果，用法：Select&lt;Order&gt;("*") 或是 Select&lt;int&gt;("1")
    /// </summary>
    /// <typeparam name="TTarget">返回实体的类型</typeparam>
    /// <param name="fields">原始字段字符串，默认值*</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<TTarget> Select<TTarget>(string fields = "*");
    #endregion

    #region ToSql
    /// <summary>
    /// 返回当前查询的SQL和参数列表
    /// </summary>
    /// <param name="dbParameters">参数列表</param>
    /// <returns>当前查询的SQL</returns>
    string ToSql(out List<IDbDataParameter> dbParameters);
    #endregion
}
/// <summary>
/// 子查询，所有的子查询都是从From开始的
/// </summary>
public interface IFromQuery
{
    #region From
    /// <summary>
    /// 创建子查询，生成SQL: FROM T
    /// </summary>
    /// <typeparam name="T">实体类型</typeparam>
    /// <param name="tableAsStart">表别名起始字母，默认从'a'开始</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<T> From<T>(char tableAsStart = 'a');
<#
    var count = 15;
    string tables = "T1";
    string currentTable = null;
    for (int i = 2; i <= count; i++)
    {
        tables += $", T{i}";
#>
    /// <summary>
    /// 使用<#=i#>个表创建查询对象
    /// </summary>
<#
        for(int j = 1; j <= i; j++)
        {
            currentTable = $"T{j}";
#>
    /// <typeparam name="<#=currentTable#>">表T<#=j#>实体类型</typeparam>
<#      }#>
    /// <param name="tableAsStart">表别名起始字母，默认值从字母a开始</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<<#=tables#>> From<<#=tables#>>(char tableAsStart = 'a');
<#  }#>
    #endregion

    #region ToSql
    /// <summary>
    /// 返回当前查询的SQL和参数列表
    /// </summary>
    /// <param name="dbParameters">参数列表</param>
    /// <returns>当前查询的SQL</returns>
    string ToSql(out List<IDbDataParameter> dbParameters);
    #endregion
}
/// <summary>
/// 单表T子查询
/// </summary>
public interface IFromQuery<T>
{
    #region Union/UnionAll
    /// <summary>
    /// Union操作，去掉重复记录，用法：
    /// <code>
    /// await f.From&lt;Order&gt;()
    ///     ...
    ///     .Union(f =&gt; f.From&lt;Order&gt;()
    ///         .Where(x =&gt; x.Id > 1)
    ///         .Select(x =&gt; new { ... }))
    /// SQL:
    /// SELECT ... FROM `sys_order` ... UNION
    /// SELECT ... FROM `sys_order` WHERE `Id`&gt;1
    /// </code>
    /// </summary>
    /// <param name="subQuery">子查询，需要有Select语句，如：
    /// <code>f.From&lt;Order&gt;() ... .Select(x =&gt; new { ... })</code>
    /// </param>
    /// <returns>返回查询对象</returns>
    IFromQuery<T> Union(Func<IFromQuery, IFromQuery<T>> subQuery);
    /// <summary>
    /// Union All操作，所有记录不去掉重复，用法：
    /// <code>
    /// await f.From&lt;Order&gt;()
    ///     ...
    ///     .UnionAll(f =&gt; f.From&lt;Order&gt;()
    ///         .Where(x =&gt; x.Id > 1)
    ///         .Select(x =&gt; new { ... }))
    /// SQL:
    /// SELECT ... FROM `sys_order` ... UNION ALL
    /// SELECT ... FROM `sys_order` WHERE `Id`&gt;1
    /// </code>
    /// </summary>
    /// <param name="subQuery">子查询，需要有Select语句，如：
    /// <code>f.From&lt;Order&gt;() ... .Select(x =&gt; new { ... })</code>
    /// <returns>返回查询对象</returns>
    IFromQuery<T> UnionAll(Func<IFromQuery, IFromQuery<T>> subQuery);
    /// <summary>
    /// 递归CTE子查询中的Union操作，用法：
    /// <code>
    /// f.FromWithRecursive((f, cte) =&gt; f.From&lt;Menu&gt;()
    ///         ...
    ///         .Select(x =&gt; new { ... })
    ///     .UnionRecursive((x, y) =&gt; x.From&lt;Menu&gt;()
    ///         .InnerJoinRecursive(y, cte, (a, b) =&gt; a.ParentId == b.Id)
    ///         .Select((a, b) =&gt; new { ... })), "MenuList")
    /// ...
    /// SQL:
    /// WITH RECURSIVE MenuList(Id,Name,ParentId,PageId) AS 
    /// (
    /// SELECT ... FROM `sys_menu` WHERE `Id`=1 UNION
    /// SELECT ... FROM `sys_menu` a INNER JOIN MenuList b ON ...
    /// )
    /// ...
    /// </summary>
    /// <param name="subQuery">子查询，需要有Select语句，如：
    ///  f.From&lt;Menu&gt;()
    ///     .Where(x =&gt; ... )
    ///     .Select(x =&gt; new { ... })
    /// </param>
    /// <returns>返回查询对象</returns>
    IFromQuery<T> UnionRecursive(Func<IFromQuery, IFromQuery<T>, IFromQuery<T>> subQuery);
    /// <summary>
    /// 递归CTE子查询中的UnionAll操作，用法：
    /// <code>
    /// f.FromWithRecursive((f, cte) =&gt; f.From&lt;Menu&gt;()
    ///         .Where(x =&gt; x.Id == 1)
    ///         .Select(x =&gt; new { ... })
    ///     .UnionRecursiveAll((x, y) =&gt; x.From&lt;Menu&gt;()
    ///         .InnerJoinRecursive(y, cte, (a, b) =&gt; ... )
    ///         .Select((a, b) =&gt; new { ... })), "MenuList")
    /// ...
    /// </code>
    /// 生成的SQL:
    /// <code>
    /// WITH RECURSIVE MenuList(Id,Name,ParentId,PageId) AS 
    /// (
    /// SELECT ... FROM `sys_menu` WHERE `Id`=1 UNION ALL
    /// SELECT ... FROM `sys_menu` a INNER JOIN MenuList b ON ...
    /// )
    /// ...
    /// </summary>
    /// <param name="subQuery">子查询，需要有Select语句，如：
    ///  f.From&lt;Menu&gt;()
    ///     .Where(x =&gt; ... )
    ///     .Select(x =&gt; new { ... })
    /// </param>
    /// <returns>返回查询对象</returns>
    IFromQuery<T> UnionAllRecursive(Func<IFromQuery, IFromQuery<T>, IFromQuery<T>> subQuery);
    #endregion

    #region Join
    /// <summary>
    /// 添加TOther表，与现有表T做INNER JOIN关联，用法:
    /// <code>
    /// f.From&lt;User&gt;()
    ///     .InnerJoin&lt;Order&gt;((x, y) =&gt; x.Id == y.BuyerId)
    /// </code>
    /// </summary>
    /// <typeparam name="TOther">实体类型</typeparam>
    /// <param name="joinOn">关联条件表达式</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<T, TOther> InnerJoin<TOther>(Expression<Func<T, TOther, bool>> joinOn);
    /// <summary>
    /// 添加TOther表，与现有表T做LEFT JOIN关联，用法:
    /// <code>
    /// f.From&lt;User&gt;()
    ///     .LeftJoin&lt;Order&gt;((x, y) =&gt; x.Id == y.BuyerId)
    /// </code>
    /// </summary>
    /// <typeparam name="TOther">实体类型</typeparam>
    /// <param name="joinOn">关联条件表达式</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<T, TOther> LeftJoin<TOther>(Expression<Func<T, TOther, bool>> joinOn);
    /// <summary>
    /// 添加TOther表，与现有表T做RIGHT JOIN关联，用法:
    /// <code>
    /// f.From&lt;User&gt;()
    ///     .RightJoin&lt;Order&gt;((x, y) =&gt; x.Id == y.BuyerId)
    /// </code>
    /// </summary>
    /// <typeparam name="TOther">实体类型</typeparam>
    /// <param name="joinOn">关联条件表达式</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<T, TOther> RightJoin<TOther>(Expression<Func<T, TOther, bool>> joinOn);
    /// <summary>
    /// 在递归CTE的Union/UnionAll子句中，添加当前CTE自身引用，与上个子句中的表做INNER JOIN关联，用法：
    /// <code>
    /// f.FromWithRecursive((f, cte) =&gt; f.From&lt;Menu&gt;()
    ///         .Where(x =&gt; ... )
    ///         .Select(x =&gt; new { ... })
    ///     .UnionAllRecursive((x, y) =&gt; x.From&lt;Menu&gt;()
    ///         .InnerJoinRecursive(y, cte, (a, b) =&gt; ... )
    ///         .Select((a, b) =&gt; new { ... })), "MenuList")
    /// ...
    /// SQL:
    /// WITH RECURSIVE MenuList(Id,Name,ParentId,PageId) AS 
    /// (
    /// SELECT ... FROM `sys_menu` WHERE `Id`=1 UNION ALL
    /// SELECT ... FROM `sys_menu` a INNER JOIN MenuList b ON ...
    /// )
    /// ...
    /// </summary>
    /// <typeparam name="TTarget">CTE子句返回的实体类型，CTE子句中通常会有SELECT操作，返回的类型是一个匿名类</typeparam>
    /// <param name="target">CTE子句返回的对象</param>
    /// <param name="cteTableName">CTE子句表名</param>
    /// <param name="joinOn">关联条件表达式</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<T, TTarget> InnerJoinRecursive<TTarget>(IFromQuery<TTarget> target, string cteTableName, Expression<Func<T, TTarget, bool>> joinOn);
    /// <summary>
    /// 在递归CTE的Union/UnionAll子句中，添加当前CTE自身引用，与上个子句中的表做LEFT JOIN关联，用法：
    /// <code>
    /// f.FromWithRecursive((f, cte) =&gt; f.From&lt;Menu&gt;()
    ///         .Where(x =&gt; x.Id == 1)
    ///         .Select(x =&gt; new { ... })
    ///     .UnionAllRecursive((x, y) =&gt; x.From&lt;Menu&gt;()
    ///         .LeftJoinRecursive(y, cte, (a, b) =&gt; ... )
    ///         .Select((a, b) =&gt; new { ... })), "MenuList")
    /// ...
    /// SQL:
    /// WITH RECURSIVE MenuList(Id,Name,ParentId,PageId) AS 
    /// (
    /// SELECT ... FROM `sys_menu` WHERE `Id`=1 UNION ALL
    /// SELECT ... FROM `sys_menu` a LEFT JOIN MenuList b ON ...
    /// )
    /// ...
    /// </summary>
    /// <typeparam name="TTarget">CTE子句返回的实体类型，CTE子句中通常会有SELECT操作，返回的类型是一个匿名类</typeparam>
    /// <param name="target">CTE子句返回的对象</param>
    /// <param name="cteTableName">CTE子句表名</param>
    /// <param name="joinOn">关联条件表达式</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<T, TTarget> LeftJoinRecursive<TTarget>(IFromQuery<TTarget> target, string cteTableName, Expression<Func<T, TTarget, bool>> joinOn);
    /// <summary>
    /// 在递归CTE的Union/UnionAll子句中，添加当前CTE自身引用，与上个子句中的表做RIGHT JOIN关联，用法：
    /// <code>
    /// f.FromWithRecursive((f, cte) =&gt; f.From&lt;Menu&gt;()
    ///         .Where(x =&gt; ...)
    ///         .Select(x =&gt; new { ... })
    ///     .UnionAllRecursive((x, y) =&gt; x.From&lt;Menu&gt;()
    ///         .RightJoinRecursive(y, cte, (a, b) =&gt; ... )
    ///         .Select((a, b) =&gt; new { ... })), "MenuList")
    /// ...
    /// SQL:
    /// WITH RECURSIVE MenuList(Id,Name,ParentId,PageId) AS 
    /// (
    /// SELECT ... FROM `sys_menu` WHERE `Id`=1 UNION ALL
    /// SELECT ... FROM `sys_menu` a RIGHT JOIN MenuList b ON ...
    /// )
    /// ...
    /// </summary>
    /// <typeparam name="TTarget">CTE子句返回的实体类型</typeparam>
    /// <param name="target">CTE子句返回的对象</param>
    /// <param name="cteTableName">CTE子句表名</param>
    /// <param name="joinOn">关联条件表达式</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<T, TTarget> RightJoinRecursive<TTarget>(IFromQuery<TTarget> target, string cteTableName, Expression<Func<T, TTarget, bool>> joinOn);
    #endregion

    #region Where/And
    /// <summary>
    /// 使用predicate表达式生成Where条件，表达式predicate不能为null
    /// </summary>
    /// <param name="predicate">条件表达式，表达式predicate不能为null</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<T> Where(Expression<Func<T, bool>> predicate);
    /// <summary>
    /// 判断condition布尔值，如果为true，使用表达式ifPredicate生成Where条件，否则使用表达式elsePredicate生成Where条件
    /// 表达式elsePredicate值可为nul，condition布尔值为false且表达式elsePredicate为null时，不生成Where条件
    /// </summary>
    /// <param name="condition">根据condition的值进行判断使用表达式</param>
    /// <param name="ifPredicate">condition为true时，使用的表达式，不可为null</param>
    /// <param name="elsePredicate">condition为false时，使用的表达式，值可为null，condition为false且elsePredicate为null时，则不生成Where条件</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<T> Where(bool condition, Expression<Func<T, bool>> ifPredicate, Expression<Func<T, bool>> elsePredicate = null);
    /// <summary>
    /// 使用predicate表达式生成Where条件，并添加到已有的Where条件末尾，表达式predicate不能为null
    /// </summary>
    /// <param name="predicate">条件表达式，表达式predicate不能为null</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<T> And(Expression<Func<T, bool>> predicate);
    /// <summary>
    /// 判断condition布尔值，如果为true，使用表达式ifPredicate生成Where条件，并添加到已有的Where条件末尾，否则使用表达式elsePredicate生成Where条件，并添加到已有的Where条件末尾
    /// 表达式elsePredicate值可为nul，condition布尔值为false且表达式elsePredicate为null时，将不生成追加的Where条件
    /// </summary>
    /// <param name="condition">根据condition的值进行判断使用表达式</param>
    /// <param name="ifPredicate">condition为true时，使用的表达式，不可为null</param>
    /// <param name="elsePredicate">condition为false时，使用的表达式，值可为null，condition为false且elsePredicate为null时，将不生成追加的Where条件</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<T> And(bool condition, Expression<Func<T, bool>> ifPredicate = null, Expression<Func<T, bool>> elsePredicate = null);
    #endregion

    #region GroupBy
    /// <summary>
    /// 分组查询，分组表达式groupingExpr可以是单个字段或多个字段的匿名对象，用法:
    /// <code>
    /// repository.From&lt;User&gt;() ...
    ///    .GroupBy(f =&gt; new { f.Id, f.Name, f.CreatedAt.Date })
    ///    ...
    /// SQL: ... FROM `sys_user` a ... GROUP BY a.`Id`,a.`Name`,CONVERT(a.`CreatedAt`,DATE) ...
    /// </code>
    /// </summary>
    /// <typeparam name="TGrouping">分组后的实体对象类型，New类型表达式，可以一个或是多个字段</typeparam>
    /// <param name="groupingExpr">分组表达式，可以是单个字段或多个字段的匿名对象</param>
    /// <returns>返回查询对象</returns>
    IFromGroupingQuery<T, TGrouping> GroupBy<TGrouping>(Expression<Func<T, TGrouping>> groupingExpr);
    #endregion

    #region OrderBy
    /// <summary>
    /// ASC排序，fieldsExpr可以是单个字段或多个字段的匿名对象，用法：
    /// OrderBy(f =&gt; new { f.Id, f.Id }) 或是 OrderBy(x =&gt; x.CreatedAt.Date)
    /// </summary>
    /// <typeparam name="TFields">表达式fieldsExpr的类型</typeparam>
    /// <param name="fieldsExpr">字段表达式，可以是单个字段或多个字段的匿名对象</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<T> OrderBy<TFields>(Expression<Func<T, TFields>> fieldsExpr);
    /// <summary>
    /// 判断condition布尔值，如果为true，生成ASC排序，否则不生成ASC排序。fieldsExpr可以是单个字段或多个字段的匿名对象，用法：
    /// OrderBy(true, f =&gt; new { f.Id, f.Id }) 或是 OrderBy(true, x =&gt; x.CreatedAt.Date)
    /// </summary>
    /// <typeparam name="TFields">表达式fieldsExpr的类型</typeparam>
    /// <param name="condition">排序表达式生效条件，为true生效</param>
    /// <param name="fieldsExpr">字段表达式，可以是单个字段或多个字段的匿名对象</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<T> OrderBy<TFields>(bool condition, Expression<Func<T, TFields>> fieldsExpr);
    /// <summary>
    /// 使用表达式fieldsExpr，生成DSC排序语句，fieldsExpr可以是一或多个字段，用法：
    /// OrderByDescending(f =&gt; new { f.Id, f.Id }) 或是 OrderByDescending(x =&gt; x.CreatedAt.Date)
    /// </summary>
    /// <typeparam name="TFields">表达式fieldsExpr的类型</typeparam>
    /// <param name="fieldsExpr">字段表达式，可以是单个字段或多个字段的匿名对象</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<T> OrderByDescending<TFields>(Expression<Func<T, TFields>> fieldsExpr);
    /// <summary>
    /// 判断condition布尔值，如果为true，生成DESC排序，否则不生成DESC排序。fieldsExpr可以是单个字段或多个字段的匿名对象，用法：
    /// OrderByDescending(true, f =&gt; new { f.Id, f.Id }) 或是 OrderByDescending(true, x =&gt; x.CreatedAt.Date)
    /// </summary>
    /// <typeparam name="TFields">表达式fieldsExpr的类型</typeparam>
    /// <param name="condition">排序表达式生效条件，为true生效</param>
    /// <param name="fieldsExpr">字段表达式，可以是单个字段或多个字段的匿名对象</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<T> OrderByDescending<TFields>(bool condition, Expression<Func<T, TFields>> fieldsExpr);
    #endregion

    #region Distinct
    /// <summary>
    /// 生成DISTINCT语句，去掉重复数据
    /// </summary>
    /// <returns>返回查询对象</returns>
    IFromQuery<T> Distinct();
    #endregion

    #region Take
    /// <summary>
    /// 只返回limit条数据
    /// </summary>
    /// <param name="limit">返回的数据条数</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<T> Take(int limit);
    #endregion

    #region Select
    /// <summary>
    /// 直接返回所有字段
    /// </summary>
    /// <returns>返回查询对象</returns>
    IFromQuery<T> Select();
    /// <summary>
    /// 使用原始字段返回匿名查询结果，主要用在不关注结果类型的地方，比如：Sql.Exists语句，用于判断数据是否存在，用法：Select("*") 或是 Select("1")，
    /// </summary>
    /// <param name="fields">原始字段字符串，默认值*</param>
    /// <returns>返回匿名查询对象</returns>
    IQueryAnonymousObject Select(string fields = "*");
    /// <summary>
    /// 使用原始字段返回查询结果，用法：Select&lt;Order&gt;("*") 或是 Select&lt;int&gt;("1")
    /// </summary>
    /// <typeparam name="TTarget">返回实体的类型</typeparam>
    /// <param name="fields">原始字段字符串，默认值*</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<TTarget> Select<TTarget>(string fields = "*");
   /// <summary>
    /// 选择指定字段返回，可以是一个或多个字段的匿名对象，用法：
    /// <code> ...Select(f =&gt; new { f.Id, f.Name }) 或是 ...Select(x =&gt; x.CreatedAt.Date)</code>
    /// </summary>
    /// <typeparam name="TTarget">返回实体的类型</typeparam>
    /// <param name="fieldsExpr">字段选择表达式，单个字段或多个字段的匿名对象</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<TTarget> Select<TTarget>(Expression<Func<T, TTarget>> fieldsExpr);
    /// <summary>
    /// 选择指定聚合字段返回，可以是单个聚合字段或多个聚合字段的匿名对象，用法：
    /// <code>
    /// f.From&lt;Order&gt;()
    ///    .SelectAggregate((x, a) =&gt; new
    ///    {
    ///        OrderCount = x.Count(a.Id),
    ///        TotalAmount = x.Sum(a.TotalAmount)
    ///    })
    /// SQL: SELECT COUNT(`Id`) AS `OrderCount`,SUM(`TotalAmount`) AS `TotalAmount` FROM `sys_order`
    /// </code>
    /// </summary>
    /// <typeparam name="TTarget">返回实体的类型，单个字段类型，或是多个字段的匿名类</typeparam>
    /// <param name="fieldsExpr">字段选择表达式，单个聚合字段或多个聚合字段的匿名对象</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<TTarget> SelectAggregate<TTarget>(Expression<Func<IAggregateSelect, T, TTarget>> fieldsExpr);
    #endregion

    #region ToSql
    /// <summary>
    /// 返回当前查询的SQL和参数列表
    /// </summary>
    /// <param name="dbParameters">参数列表</param>
    /// <returns>当前查询的SQL</returns>
    string ToSql(out List<IDbDataParameter> dbParameters);
    #endregion
}
<#
    count = 16;
    tables = "T1";
    var tableAlias = "a"; 
    for (int i = 2; i < count; i++)
    {
        tables += $", T{i}";
        tableAlias += $", {(char)(96 + i)}";
#>
/// <summary>
/// 多表<#=tables#>子查询
/// </summary>
/// <typeparam name="T1">表T1实体类型</typeparam>
<#
        for (int j = 2; j <= i; j++)
        {
            currentTable = $"T{j}";
#>
/// <typeparam name="<#=currentTable#>">表<#=currentTable#>实体类型</typeparam>
<#      }#>
public interface IFromQuery<<#=tables#>> : IFromQueryBase
{
    #region Join
    /// <summary>
    /// 在现有表中，指定2个表进行INNER JOIN关联，一次只能指定2个表，但可以多次使用本方法关联，用法:
    /// <code>
    /// f.From&lt;<#=tables#>&gt;()
    ///     ... ...
    ///     .InnerJoin((<#=tableAlias#>) =&gt; ...)
     /// </code>
    /// </summary>
    /// <param name="joinOn">关联条件表达式</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<<#=tables#>> InnerJoin(Expression<Func<<#=tables#>, bool>> joinOn);
    /// <summary>
    /// 在现有表中，指定2个表进行LEFT JOIN关联，一次只能指定2个表，但可以多次使用本方法关联，用法:
    /// <code>
    /// f.From&lt;<#=tables#>&gt;()
    ///     ... ...
    ///     .LeftJoin((<#=tableAlias#>) =&gt; ...)
    /// </code>
    /// </summary>
    /// <param name="joinOn">关联条件表达式</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<<#=tables#>> LeftJoin(Expression<Func<<#=tables#>, bool>> joinOn);
    /// <summary>
    /// 在现有表中，指定2个表进行RIGHT JOIN关联，一次只能指定2个表，但可以多次使用本方法关联，用法:
    /// <code>
    /// f.From&lt;<#=tables#>&gt;()
    ///     ... ...
    ///     .RightJoin((<#=tableAlias#>) =&gt; ...)
    /// </code>
    /// </summary>
    /// <param name="joinOn">关联条件表达式</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<<#=tables#>> RightJoin(Expression<Func<<#=tables#>, bool>> joinOn);
<#
        if(i < count - 1)
        {
#>
    /// <summary>
    /// 在现有表中，添加TOther表，并指定1个表与其进行INNER JOIN关联，用法:
    /// <code>
    /// f.From&lt;<#=tables#>&gt;()
    ///     ... ...
    ///     .InnerJoin&lt;TOther&gt;((<#=tableAlias#>) =&gt; ...)
    /// </code>
    /// </summary>
    /// <typeparam name="TOther">表TOther实体类型</typeparam>
    /// <param name="joinOn">关联条件表达式</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<<#=tables#>, TOther> InnerJoin<TOther>(Expression<Func<<#=tables#>, TOther, bool>> joinOn);
    /// <summary>
    /// 在现有表中，添加TOther表，并指定1个表与其做LEFT JOIN关联，用法:
    /// <code>
    /// f.From&lt;<#=tables#>&gt;()
    ///     ... ...
    ///     .LeftJoin&lt;TOther&gt;((<#=tableAlias#>) =&gt; ...)
    /// </code>
    /// </summary>
    /// <typeparam name="TOther">表实体类型</typeparam>
    /// <param name="joinOn">关联条件表达式</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<<#=tables#>, TOther> LeftJoin<TOther>(Expression<Func<<#=tables#>, TOther, bool>> joinOn);
    /// <summary>
    /// 在现有表中，添加TOther表，并指定1个表与其做RIGHT JOIN关联，用法:
    /// <code>
    /// f.From&lt;<#=tables#>&gt;()
    ///     ... ...
    ///     .RightJoin&lt;<#=currentTable#>&gt;((<#=tableAlias#>) =&gt; ...)
    /// </code>
    /// </summary>
    /// <typeparam name="TOther">表TOther实体类型</typeparam>
    /// <param name="joinOn">关联条件表达式</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<<#=tables#>, TOther> RightJoin<TOther>(Expression<Func<<#=tables#>, TOther, bool>> joinOn);
    /// <summary>
    /// 在递归CTE的Union/UnionAll子句中，添加当前CTE自身引用，与上个子句中的表做INNER JOIN关联，用法：
    /// <code>
    /// f.FromWithRecursive((f, cte) =&gt; f.From&lt;Menu&gt;()
    ///         .Where(x =&gt; ... )
    ///         .Select(x =&gt; new { ... })
    ///     .UnionAllRecursive((x, y) =&gt; x.From&lt;Menu&gt;()
    ///         .InnerJoinRecursive(y, cte, (a, b ...) =&gt; ... )
    ///         .Select((a, b ...) =&gt; new { ... })), "MenuList")
    /// ...
    /// SQL:
    /// WITH RECURSIVE MenuList(Id,Name,ParentId,PageId) AS 
    /// (
    /// SELECT ... FROM `sys_menu` WHERE `Id`=1 UNION ALL
    /// SELECT ... FROM `sys_menu` a INNER JOIN MenuList b ON ...
    /// )
    /// ...
    /// </summary>
    /// <typeparam name="TTarget">CTE子句返回的实体类型，CTE子句中通常会有SELECT操作，返回的类型是一个匿名类</typeparam>
    /// <param name="target">CTE子句返回的对象</param>
    /// <param name="cteTableName">CTE子句表名</param>
    /// <param name="joinOn">关联条件表达式</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<<#=tables#>, TTarget> InnerJoinRecursive<TTarget>(IFromQuery<TTarget> target, string cteTableName, Expression<Func<<#=tables#>, TTarget, bool>> joinOn);
    /// <summary>
    /// 在递归CTE的Union/UnionAll子句中，添加当前CTE自身引用，与上个子句中的表做LEFT JOIN关联，用法：
    /// <code>
    /// f.FromWithRecursive((f, cte) =&gt; f.From&lt;Menu&gt;()
    ///         .Where(x =&gt; x.Id == 1)
    ///         .Select(x =&gt; new { ... })
    ///     .UnionAllRecursive((x, y) =&gt; x.From&lt;Menu&gt;()
    ///         .LeftJoinRecursive(y, cte, (a, b) =&gt; ... )
    ///         .Select((a, b) =&gt; new { ... })), "MenuList")
    /// ...
    /// SQL:
    /// WITH RECURSIVE MenuList(Id,Name,ParentId,PageId) AS 
    /// (
    /// SELECT ... FROM `sys_menu` WHERE `Id`=1 UNION ALL
    /// SELECT ... FROM `sys_menu` a LEFT JOIN MenuList b ON ...
    /// )
    /// ...
    /// </summary>
    /// <typeparam name="TTarget">CTE子句返回的实体类型，CTE子句中通常会有SELECT操作，返回的类型是一个匿名类</typeparam>
    /// <param name="target">CTE子句返回的对象</param>
    /// <param name="cteTableName">CTE子句表名</param>
    /// <param name="joinOn">关联条件表达式</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<<#=tables#>, TTarget> LeftJoinRecursive<TTarget>(IFromQuery<TTarget> target, string cteTableName, Expression<Func<<#=tables#>, TTarget, bool>> joinOn);
    /// <summary>
    /// 在递归CTE的Union/UnionAll子句中，添加当前CTE自身引用，与上个子句中的表做RIGHT JOIN关联，用法：
    /// <code>
    /// f.FromWithRecursive((f, cte) =&gt; f.From&lt;Menu&gt;()
    ///         .Where(x =&gt; ...)
    ///         .Select(x =&gt; new { ... })
    ///     .UnionAllRecursive((x, y) =&gt; x.From&lt;Menu&gt;()
    ///         .RightJoinRecursive(y, cte, (a, b ...) =&gt; ... )
    ///         .Select((a, b ... ) =&gt; new { ... })), "MenuList")
    /// ...
    /// SQL:
    /// WITH RECURSIVE MenuList(Id,Name,ParentId,PageId) AS 
    /// (
    /// SELECT ... FROM `sys_menu` WHERE `Id`=1 UNION ALL
    /// SELECT ... FROM `sys_menu` a RIGHT JOIN MenuList b ON ...
    /// )
    /// ...
    /// </summary>
    /// <typeparam name="TTarget">CTE子句返回的实体类型</typeparam>
    /// <param name="target">CTE子句返回的对象</param>
    /// <param name="cteTableName">CTE子句表名</param>
    /// <param name="joinOn">关联条件表达式</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<<#=tables#>, TTarget> RightJoinRecursive<TTarget>(IFromQuery<TTarget> target, string cteTableName, Expression<Func<<#=tables#>, TTarget, bool>> joinOn);
<#      }#>
    #endregion

    #region Where/And
    /// <summary>
    /// 使用predicate表达式生成Where条件，表达式predicate不能为null
    /// </summary>
    /// <param name="predicate">条件表达式，表达式predicate不能为null</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<<#=tables#>> Where(Expression<Func<<#=tables#>, bool>> predicate);
    /// <summary>
    /// 判断condition布尔值，如果为true，使用表达式ifPredicate生成Where条件，否则使用表达式elsePredicate生成Where条件
    /// 表达式elsePredicate值可为nul，condition布尔值为false且表达式elsePredicate为null时，不生成Where条件
    /// </summary>
    /// <param name="condition">根据condition的值进行判断使用表达式</param>
    /// <param name="ifPredicate">condition为true时，使用的表达式，不可为null</param>
    /// <param name="elsePredicate">condition为false时，使用的表达式，值可为null，condition为false且elsePredicate为null时，则不生成Where条件</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<<#=tables#>> Where(bool condition, Expression<Func<<#=tables#>, bool>> ifPredicate, Expression<Func<<#=tables#>, bool>> elsePredicate = null);
    /// <summary>
    /// 使用predicate表达式生成Where条件，并添加到已有的Where条件末尾，表达式predicate不能为null
    /// </summary>
    /// <param name="predicate">条件表达式，表达式predicate不能为null</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<<#=tables#>> And(Expression<Func<<#=tables#>, bool>> predicate);
    /// <summary>
    /// 判断condition布尔值，如果为true，使用表达式ifPredicate生成Where条件，并添加到已有的Where条件末尾，否则使用表达式elsePredicate生成Where条件，并添加到已有的Where条件末尾
    /// 表达式elsePredicate值可为nul，condition布尔值为false且表达式elsePredicate为null时，将不生成追加的Where条件
    /// </summary>
    /// <param name="condition">根据condition的值进行判断使用表达式</param>
    /// <param name="ifPredicate">condition为true时，使用的表达式，不可为null</param>
    /// <param name="elsePredicate">condition为false时，使用的表达式，值可为null，condition为false且elsePredicate为null时，将不生成追加的Where条件</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<<#=tables#>> And(bool condition, Expression<Func<<#=tables#>, bool>> ifPredicate = null, Expression<Func<<#=tables#>, bool>> elsePredicate = null);
    #endregion

<#
        if(i < count - 1)
        {
#>
    #region GroupBy
    /// <summary>
    /// 分组查询，分组表达式groupingExpr可以是单个字段或多个字段的匿名对象，用法:
    /// <code>
    /// f.From&lt;User&gt;() ...
    ///    .GroupBy((a, b, ...) =&gt; new { a.Id, a.Name, b.CreatedAt.Date ... })
    ///    ...
    /// SQL: ... FROM `sys_user` a ... GROUP BY a.`Id`,a.`Name`,CONVERT(b.`CreatedAt`,DATE) ...
    /// </code>
    /// </summary>
    /// <typeparam name="TGrouping">分组后的实体对象类型，New类型表达式，可以一个或是多个字段</typeparam>
    /// <param name="groupingExpr">分组表达式，可以是单个字段或多个字段的匿名对象</param>
    /// <returns>返回查询对象</returns>
    IFromGroupingQuery<<#=tables#>, TGrouping> GroupBy<TGrouping>(Expression<Func<<#=tables#>, TGrouping>> groupingExpr);
    #endregion

<#      }#>
    #region OrderBy
    /// <summary>
    /// ASC排序，fieldsExpr可以是单个字段或多个字段的匿名对象，用法：
    /// OrderBy((a, b, ...) =&gt; new { a.Id, b.Id, ... }) 或是 OrderBy((a, b, ...) =&gt; a.CreatedAt.Date)
    /// </summary>
    /// <typeparam name="TFields">表达式fieldsExpr的类型</typeparam>
    /// <param name="fieldsExpr">字段表达式，可以是单个字段或多个字段的匿名对象</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<<#=tables#>> OrderBy<TFields>(Expression<Func<<#=tables#>, TFields>> fieldsExpr);
    /// <summary>
    /// 判断condition布尔值，如果为true，生成ASC排序，否则不生成ASC排序。fieldsExpr可以是单个字段或多个字段的匿名对象，用法：
    /// OrderBy(true, (a, b, ...) =&gt; new { a.Id, b.Id, ... }) 或是 OrderBy(true, (a, b, ...) =&gt; a.CreatedAt.Date)
    /// </summary>
    /// <typeparam name="TFields">表达式fieldsExpr的类型</typeparam>
    /// <param name="condition">排序表达式生效条件，为true生效</param>
    /// <param name="fieldsExpr">字段表达式，可以是单个字段或多个字段的匿名对象</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<<#=tables#>> OrderBy<TFields>(bool condition, Expression<Func<<#=tables#>, TFields>> fieldsExpr);
    /// <summary>
    /// 使用表达式fieldsExpr，生成DSC排序语句，fieldsExpr可以是一或多个字段，用法：
    /// OrderByDescending((a, b, ...) =&gt; new { a.Id, b.Id, ... }) 或是 OrderByDescending((a, b, ...) =&gt; a.CreatedAt.Date)
    /// </summary>
    /// <typeparam name="TFields">表达式fieldsExpr的类型</typeparam>
    /// <param name="fieldsExpr">字段表达式，可以是单个字段或多个字段的匿名对象</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<<#=tables#>> OrderByDescending<TFields>(Expression<Func<<#=tables#>, TFields>> fieldsExpr);
    /// <summary>
    /// 判断condition布尔值，如果为true，生成DESC排序，否则不生成DESC排序。fieldsExpr可以是单个字段或多个字段的匿名对象，用法：
    /// OrderByDescending(true, (a, b, ...) =&gt; new { a.Id, b.Id, ... }) 或是 OrderByDescending(true, (a, b, ...) =&gt; a.CreatedAt.Date)
    /// </summary>
    /// <typeparam name="TFields">表达式fieldsExpr的类型</typeparam>
    /// <param name="condition">排序表达式生效条件，为true生效</param>
    /// <param name="fieldsExpr">字段表达式，可以是单个字段或多个字段的匿名对象</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<<#=tables#>> OrderByDescending<TFields>(bool condition, Expression<Func<<#=tables#>, TFields>> fieldsExpr);
    #endregion

    #region Select
    /// <summary>
    /// 选择指定字段返回实体，一个字段或多个字段的匿名对象，用法：
    /// Select((a, b, ...) =&gt; new { a.Id, b.Name, ... }) 或是 Select((a, b, ...) =&gt; a.CreatedAt.Date)
    /// </summary>
    /// <typeparam name="TTarget">返回实体的类型</typeparam>
    /// <param name="fieldsExpr">字段选择表达式</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<TTarget> Select<TTarget>(Expression<Func<<#=tables#>, TTarget>> fieldsExpr);
    /// <summary>
    /// 选择指定聚合字段返回实体，单个聚合字段或多个聚合字段的匿名对象，用法：
    /// <code>
    /// repository.From&lt;Order&gt;()
    ///    .SelectAggregate((x, a, ... ) =&gt; new
    ///    {
    ///        OrderCount = x.Count(a.Id),
    ///        TotalAmount = x.Sum(a.TotalAmount)
    ///    })
    ///    .ToSql(out _);
    /// </code>
    /// 生成的SQL:
    /// <code>SELECT COUNT(`Id`) AS `OrderCount`,SUM(`TotalAmount`) AS `TotalAmount` FROM `sys_order`</code>
    /// </summary>
    /// <typeparam name="TTarget">返回实体的类型，通常是一个匿名类</typeparam>
    /// <param name="fieldsExpr">字段选择表达式，单个或多个聚合字段的匿名对象</param>
    /// <returns>返回查询对象</returns>
    IFromQuery<TTarget> SelectAggregate<TTarget>(Expression<Func<IAggregateSelect, <#=tables#>, TTarget>> fieldsExpr);
    #endregion
}
<#  }#>