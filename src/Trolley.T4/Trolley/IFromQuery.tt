<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<#@ output extension=".cs" #>
using System.Collections.Generic;
using System.Data;

namespace Trolley;

/// <summary>
/// 子查询，所有的子查询都是从From开始的
/// </summary>
public interface IFromQuery
{
    #region From
    /// <summary>
    /// 创建子查询，生成SQL: FROM T
    /// </summary>
    /// <typeparam name="T">实体类型</typeparam>
    /// <param name="tableAsStart">表别名起始字母，默认从'a'开始</param>
    /// <returns>返回查询对象</returns>
    IQuery<T> From<T>(char tableAsStart='a');
    /// <summary>
    /// 创建子查询，生成SQL: FROM T
    /// </summary>
    /// <typeparam name="T">实体类型</typeparam>
    /// <param name="tableAsStart">表别名起始字母，默认从'a'开始</param>
    /// <param name="suffixRawSql">额外的原始SQL, SqlServer会有With用法，如：<cdoe>SELECT * FROM sys_user WITH(NOLOCK)</param>
    /// <returns>返回查询对象</returns>
    IQuery<T> From<T>(char tableAsStart, string suffixRawSql);
<#
    var count = 15;
    string tables = "T1";
    string currentTable = null;
    for (int i = 2; i <= count; i++)
    {
        tables += $", T{i}";
#>
    /// <summary>
    /// 使用<#=i#>个表创建查询对象
    /// </summary>
<#
        for(int j = 1; j <= i; j++)
        {
            currentTable = $"T{j}";
#>
    /// <typeparam name="<#=currentTable#>">表T<#=j#>实体类型</typeparam>
<#      }#>
    /// <param name="tableAsStart">表别名起始字母，默认值从字母a开始</param>
    /// <returns>返回查询对象</returns>
    IQuery<<#=tables#>> From<<#=tables#>>(char tableAsStart = 'a');
<#  }#>
    #endregion

    #region ToSql
    /// <summary>
    /// 返回当前查询的SQL和参数列表
    /// </summary>
    /// <param name="dbParameters">参数列表</param>
    /// <returns>当前查询的SQL</returns>
    string ToSql(out List<IDbDataParameter> dbParameters);
    #endregion
}