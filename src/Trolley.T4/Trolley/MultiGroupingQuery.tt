<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<#@ output extension=".cs" #>
using System;
using System.Linq.Expressions;

namespace Trolley;

class MultiGroupingQueryBase<TGrouping>
{
    #region Fields
    protected MultipleQuery multiQuery;
    protected IOrmProvider ormProvider;
    protected IQueryVisitor visitor;
    #endregion

    #region Constructor
    public MultiGroupingQueryBase(MultipleQuery multiQuery, IOrmProvider ormProvider, IQueryVisitor visitor)
    {
        this.multiQuery = multiQuery;
        this.ormProvider = ormProvider;
        this.visitor = visitor;
    }
    #endregion

    #region Select
    public IMultiQuery<TGrouping> Select()
    {
        this.visitor.SelectGrouping(true);
        return new MultiQuery<TGrouping>(this.multiQuery, this.ormProvider, this.visitor);
    }
    public IMultiQuery<TTarget> Select<TTarget>(string fields)
    {
        if (string.IsNullOrEmpty(fields))
            throw new ArgumentNullException(nameof(fields));

        this.visitor.Select(fields, null, true);
        return new MultiQuery<TTarget>(this.multiQuery, this.ormProvider, this.visitor);
    }
    #endregion
}
class MultiGroupingQuery<T, TGrouping> : MultiGroupingQueryBase<TGrouping>, IMultiGroupingQuery<T, TGrouping>
{
    #region Constructor
    public MultiGroupingQuery(MultipleQuery multiQuery, IOrmProvider ormProvider, IQueryVisitor visitor)
        : base(multiQuery, ormProvider, visitor) { }
    #endregion

    #region Having
    public IMultiGroupingQuery<T, TGrouping> Having(Expression<Func<IGroupingAggregate<TGrouping>, T, bool>> predicate)
    {
        if (predicate == null)
            throw new ArgumentNullException(nameof(predicate));

        this.visitor.Having(predicate);
        return this;
    }
    public IMultiGroupingQuery<T, TGrouping> Having(bool condition, Expression<Func<IGroupingAggregate<TGrouping>, T, bool>> predicate)
    {
        if (predicate == null)
            throw new ArgumentNullException(nameof(predicate));

        if (condition)
            this.visitor.Having(predicate);
        return this;
    }
    #endregion

    #region OrderBy/OrderByDescending
    public IMultiGroupingQuery<T, TGrouping> OrderBy<TFields>(Expression<Func<IGroupingAggregate<TGrouping>, T, TFields>> fieldsExpr)
    {
        if (fieldsExpr == null)
            throw new ArgumentNullException(nameof(fieldsExpr));

        this.visitor.OrderBy("ASC", fieldsExpr);
        return this;
    }
    public IMultiGroupingQuery<T, TGrouping> OrderByDescending<TFields>(Expression<Func<IGroupingAggregate<TGrouping>, T, TFields>> fieldsExpr)
    {
        if (fieldsExpr == null)
            throw new ArgumentNullException(nameof(fieldsExpr));

        this.visitor.OrderBy("DESC", fieldsExpr);
        return this;
    }
    #endregion

    #region Select
    public IMultiQuery<TTarget> Select<TTarget>(Expression<Func<IGroupingAggregate<TGrouping>, T, TTarget>> fieldsExpr)
    {
        if (fieldsExpr == null)
            throw new ArgumentNullException(nameof(fieldsExpr));

        this.visitor.Select(null, fieldsExpr);
        return new MultiQuery<TTarget>(this.multiQuery, this.ormProvider, this.visitor);
    }
    #endregion
}
<#
    var count = 16;
    var tables = "T1";
    for (int i = 2; i < count; i++)
    {
        tables += $", T{i}";
#>
class MultiGroupingQuery<<#=tables#>, TGrouping> : MultiGroupingQueryBase<TGrouping>, IMultiGroupingQuery<<#=tables#>, TGrouping>
{
    #region Constructor
    public MultiGroupingQuery(MultipleQuery multiQuery, IOrmProvider ormProvider, IQueryVisitor visitor)
        : base(multiQuery, ormProvider, visitor) { }
    #endregion

<#
        if(i < count - 1)
        {
#>
    #region Having
    public IMultiGroupingQuery<<#=tables#>, TGrouping> Having(Expression<Func<IGroupingAggregate<TGrouping>, <#=tables#>, bool>> predicate)
    {
        if (predicate == null)
            throw new ArgumentNullException(nameof(predicate));

        this.visitor.Having(predicate);
        return this;
    }
    public IMultiGroupingQuery<<#=tables#>, TGrouping> Having(bool condition, Expression<Func<IGroupingAggregate<TGrouping>, <#=tables#>, bool>> predicate)
    {
        if (predicate == null)
            throw new ArgumentNullException(nameof(predicate));

        if (condition)
            this.visitor.Having(predicate);
        return this;
    }
    #endregion

    #region OrderBy/OrderByDescending
    public IMultiGroupingQuery<<#=tables#>, TGrouping> OrderBy<TFields>(Expression<Func<IGroupingAggregate<TGrouping>, <#=tables#>, TFields>> fieldsExpr)
    {
        if (fieldsExpr == null)
            throw new ArgumentNullException(nameof(fieldsExpr));

        this.visitor.OrderBy("ASC", fieldsExpr);
        return this;
    }
    public IMultiGroupingQuery<<#=tables#>, TGrouping> OrderByDescending<TFields>(Expression<Func<IGroupingAggregate<TGrouping>, <#=tables#>, TFields>> fieldsExpr)
    {
        if (fieldsExpr == null)
            throw new ArgumentNullException(nameof(fieldsExpr));

        this.visitor.OrderBy("DESC", fieldsExpr);
        return this;
    }
    #endregion

<#      }#>
    #region Select
    public IMultiQuery<TTarget> Select<TTarget>(Expression<Func<IGroupingAggregate<TGrouping>, <#=tables#>, TTarget>> fieldsExpr)
    {
        if (fieldsExpr == null)
            throw new ArgumentNullException(nameof(fieldsExpr));

        this.visitor.Select(null, fieldsExpr);
        return new MultiQuery<TTarget>(this.multiQuery, this.ormProvider, this.visitor);
    }
    #endregion
}
<#  }#>