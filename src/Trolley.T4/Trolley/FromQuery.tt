<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<#@ output extension=".cs" #>
using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace Trolley;

public class FromQuery : IFromQuery
{
    #region Fields
    protected internal DbContext dbContext;
    protected internal IQueryVisitor visitor;
    protected IOrmProvider ormProvider;
    #endregion

    #region Constructor
    public FromQuery(DbContext dbContext, IQueryVisitor visitor)
    {
        this.dbContext = dbContext;
        this.visitor = visitor;
        this.ormProvider = dbContext.OrmProvider;
    }
    public FromQuery(IOrmProvider ormProvider, IEntityMapProvider mapProvider, IQueryVisitor visitor, bool isParameterized)
    {
        this.ormProvider = ormProvider;
        this.dbContext = new DbContext
        {
            OrmProvider = ormProvider,
            MapProvider = mapProvider,
            IsParameterized = isParameterized
        };
        this.visitor = visitor;
    }
    #endregion

    #region From
    public IQuery<T> From<T>(char tableAsStart = 'a')
    {
        this.visitor.From(tableAsStart, typeof(T));
        return this.ormProvider.NewQuery<T>(this.dbContext, this.visitor);
    }
<#
    var count = 16;
    var tables = "T1";
    var typeOfTables = "typeof(T1)";
    for (int i = 2; i < count; i++)
    {
        tables += $", T{i}";
        typeOfTables += $", typeof(T{i})";
#>
    public IQuery<<#=tables#>> From<<#=tables#>>(char tableAsStart = 'a')
    {
        this.visitor.From(tableAsStart, <#=typeOfTables#>);
        return this.ormProvider.NewQuery<<#=tables#>>(this.dbContext, this.visitor);
    }
<#  }#>
    #endregion

    #region From SubQuery
    public virtual IQuery<T> From<T>(IQuery<T> subQuery)
    {
        this.visitor.From(typeof(T), subQuery);
        return this.ormProvider.NewQuery<T>(this.dbContext, this.visitor);
    }
    #endregion

    #region ToSql
    public string ToSql(out List<IDbDataParameter> dbParameters)
    {
        dbParameters = this.visitor.DbParameters.Cast<IDbDataParameter>().ToList();
        return this.visitor.BuildSql(out _);
    }
    #endregion
}