<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq.Expressions;

namespace Trolley;

class QueryAnonymousObject : IQueryAnonymousObject
{
    #region Fields
    private readonly IQueryVisitor visitor;
    #endregion

    #region Constructor
    public QueryAnonymousObject(IQueryVisitor visitor) => this.visitor = visitor;
    #endregion

    #region ToSql
    public string ToSql(out List<IDbDataParameter> dbParameters)
        => this.visitor.BuildSql(out dbParameters, out _);
    #endregion
}
class FromQueryBase
{
    #region Fields
    protected string dbKey;
    protected TheaConnection connection;
    protected IDbTransaction transaction;
    protected IOrmProvider ormProvider;
    protected IQueryVisitor visitor;
    #endregion

    #region Constructor
    public FromQueryBase(TheaConnection connection, IDbTransaction transaction, IOrmProvider ormProvider, IQueryVisitor visitor)
    {
        this.connection = connection;
        this.transaction = transaction;
        this.ormProvider = ormProvider;
        this.visitor = visitor;
        this.dbKey = connection?.DbKey;
    }
    #endregion
    
    #region Select
    public IQueryAnonymousObject Select(string fields = "*")
    {
        if(string.IsNullOrEmpty(fields))
            throw new ArgumentNullException(nameof(fields));

        this.visitor.Select(fields, null, true);
        return new QueryAnonymousObject(this.visitor);
    }
    public IFromQuery<TTarget> Select<TTarget>(string fields = "*")
    {
        if (string.IsNullOrEmpty(fields))
            throw new ArgumentNullException(nameof(fields));

        this.visitor.Select(fields, null, true);
        return new FromQuery<TTarget>(this.connection, this.transaction, this.ormProvider, this.visitor);
    }
    #endregion

    #region ToSql
    public string ToSql(out List<IDbDataParameter> dbParameters)
        => this.visitor.BuildSql(out dbParameters, out _);
    #endregion
}
class FromQuery : IFromQuery
{
    #region Fields
    protected string dbKey;
    protected TheaConnection connection;
    protected IDbTransaction transaction;
    protected IOrmProvider ormProvider;
    protected IQueryVisitor visitor;
    #endregion

    #region Constructor
    public FromQuery(IQueryVisitor visitor) => this.visitor = visitor;
    public FromQuery(TheaConnection connection, IDbTransaction transaction, IOrmProvider ormProvider, IQueryVisitor visitor)
    {
        this.connection = connection;
        this.transaction = transaction;
        this.ormProvider = ormProvider;
        this.visitor = visitor;
        this.dbKey = connection.DbKey;
    }
    #endregion

    #region From
    public IFromQuery<T> From<T>(char tableAsStart = 'a')
    {
        this.visitor.From(tableAsStart, typeof(T));
        return new FromQuery<T>(this.connection, this.transaction, this.ormProvider, this.visitor);
    }
<#
    var count = 16;
    var tables = "T1";
    var typeOfTables = "typeof(T1)";
    for (int i = 2; i < count; i++)
    {
        tables += $", T{i}";
        typeOfTables += $", typeof(T{i})";
#>
    public IFromQuery<<#=tables#>> From<<#=tables#>>(char tableAsStart = 'a')
    {
        this.visitor.From(tableAsStart, <#=typeOfTables#>);
        return new FromQuery<<#=tables#>>(this.connection, this.transaction, this.ormProvider, this.visitor);
    }
<#  }#>
    #endregion

    #region ToSql
    public string ToSql(out List<IDbDataParameter> dbParameters)
        => this.visitor.BuildSql(out dbParameters, out _);
    #endregion
}
class FromQuery<T> : IFromQuery<T>
{
    #region Fields
    protected string dbKey;
    protected TheaConnection connection;
    protected IDbTransaction transaction;
    protected IOrmProvider ormProvider;
    protected IQueryVisitor visitor;
    #endregion

    #region Constructor
    public FromQuery(IQueryVisitor visitor) => this.visitor = visitor;
    public FromQuery(TheaConnection connection, IDbTransaction transaction, IOrmProvider ormProvider, IQueryVisitor visitor)
    {
        this.connection = connection;
        this.transaction = transaction;
        this.ormProvider = ormProvider;
        this.visitor = visitor;
        this.dbKey = connection.DbKey;
    }
    #endregion

    #region Union/UnionAll
    public IFromQuery<T> Union(Func<IFromQuery, IFromQuery<T>> subQuery)
    {
        if (subQuery == null)
            throw new ArgumentNullException(nameof(subQuery));

        var newVisitor = this.visitor.Clone();
        subQuery.Invoke(new FromQuery(newVisitor));
        var sql = " UNION" + Environment.NewLine + newVisitor.BuildSql(out _, true);
        this.visitor.Union(typeof(T), sql);
        return this;
    }
    public IFromQuery<T> UnionAll(Func<IFromQuery, IFromQuery<T>> subQuery)
    {
        if (subQuery == null)
            throw new ArgumentNullException(nameof(subQuery));

        var newVisitor = this.visitor.Clone();
        subQuery.Invoke(new FromQuery(newVisitor));
        var sql = " UNION ALL" + Environment.NewLine + newVisitor.BuildSql(out _, true);
        this.visitor.Union(typeof(T), sql);
        return this;
    }
    public IFromQuery<T> UnionRecursive(Func<IFromQuery, IFromQuery<T>, IFromQuery<T>> subQuery)
    {
        if (subQuery == null)
            throw new ArgumentNullException(nameof(subQuery));

        var newVisitor = this.visitor.Clone();
        subQuery.Invoke(new FromQuery(newVisitor), null);
        var sql = " UNION" + Environment.NewLine + newVisitor.BuildSql(out _, true);
        this.visitor.Union(typeof(T), sql);
        return this;
    }
    public IFromQuery<T> UnionAllRecursive(Func<IFromQuery, IFromQuery<T>, IFromQuery<T>> subQuery)
    {
        if (subQuery == null)
            throw new ArgumentNullException(nameof(subQuery));

        var newVisitor = this.visitor.Clone();
        subQuery.Invoke(new FromQuery(newVisitor), null);
        var sql = " UNION ALL" + Environment.NewLine + newVisitor.BuildSql(out _, true);
        this.visitor.Union(typeof(T), sql);
        return this;
    }
    #endregion

    #region Join
    public IFromQuery<T, TOther> InnerJoin<TOther>(Expression<Func<T, TOther, bool>> joinOn)
    {
        if (joinOn == null)
            throw new ArgumentNullException(nameof(joinOn));

        this.visitor.Join("INNER JOIN", typeof(TOther), joinOn);
        return new FromQuery<T, TOther>(this.connection, this.transaction, this.ormProvider, this.visitor);
    }
    public IFromQuery<T, TOther> LeftJoin<TOther>(Expression<Func<T, TOther, bool>> joinOn)
    {
        if (joinOn == null)
            throw new ArgumentNullException(nameof(joinOn));

        this.visitor.Join("LEFT JOIN", typeof(TOther), joinOn);
        return new FromQuery<T, TOther>(this.connection, this.transaction, this.ormProvider, this.visitor);
    }
    public IFromQuery<T, TOther> RightJoin<TOther>(Expression<Func<T, TOther, bool>> joinOn)
    {
        if (joinOn == null)
            throw new ArgumentNullException(nameof(joinOn));

        this.visitor.Join("RIGHT JOIN", typeof(TOther), joinOn);
        return new FromQuery<T, TOther>(this.connection, this.transaction, this.ormProvider, this.visitor);
    }
    public IFromQuery<T, TTarget> InnerJoinRecursive<TTarget>(IFromQuery<TTarget> target, string cteTableName, Expression<Func<T, TTarget, bool>> joinOn)
    {
        if (joinOn == null)
            throw new ArgumentNullException(nameof(joinOn));

        this.visitor.Join("INNER JOIN", typeof(TTarget), cteTableName, joinOn);
        return new FromQuery<T, TTarget>(this.connection, this.transaction, this.ormProvider, this.visitor);
    }
    public IFromQuery<T, TTarget> LeftJoinRecursive<TTarget>(IFromQuery<TTarget> target, string cteTableName, Expression<Func<T, TTarget, bool>> joinOn)
    {
        if (joinOn == null)
            throw new ArgumentNullException(nameof(joinOn));

        this.visitor.Join("LEFT JOIN", typeof(TTarget), cteTableName, joinOn);
        return new FromQuery<T, TTarget>(this.connection, this.transaction, this.ormProvider, this.visitor);
    }
    public IFromQuery<T, TTarget> RightJoinRecursive<TTarget>(IFromQuery<TTarget> target, string cteTableName, Expression<Func<T, TTarget, bool>> joinOn)
    {
        if (joinOn == null)
            throw new ArgumentNullException(nameof(joinOn));

        this.visitor.Join("RIGHT JOIN", typeof(TTarget), cteTableName, joinOn);
        return new FromQuery<T, TTarget>(this.connection, this.transaction, this.ormProvider, this.visitor);
    }
    #endregion

    #region Where/And
    public IFromQuery<T> Where(Expression<Func<T, bool>> predicate)
    {
        if (predicate == null)
            throw new ArgumentNullException(nameof(predicate));

        this.visitor.Where(predicate);
        return this;
    }
    public IFromQuery<T> Where(bool condition, Expression<Func<T, bool>> ifPredicate, Expression<Func<T, bool>> elsePredicate = null)
    {
        if (ifPredicate == null)
            throw new ArgumentNullException(nameof(ifPredicate));

        if (condition)
            this.visitor.And(ifPredicate);
        else if (elsePredicate != null) this.visitor.And(elsePredicate);
        return this;
    }
    public IFromQuery<T> And(Expression<Func<T, bool>> predicate)
    {
        if (predicate == null)
            throw new ArgumentNullException(nameof(predicate));

        this.visitor.And(predicate);
        return this;
    }
    public IFromQuery<T> And(bool condition, Expression<Func<T, bool>> ifPredicate, Expression<Func<T, bool>> elsePredicate = null)
    {
        if (ifPredicate == null)
            throw new ArgumentNullException(nameof(ifPredicate));

        if (condition)
            this.visitor.And(ifPredicate);
        else if (elsePredicate != null) this.visitor.And(elsePredicate);
        return this;
    }
    #endregion

    #region GroupBy/OrderBy
    public IFromGroupingQuery<T, TGrouping> GroupBy<TGrouping>(Expression<Func<T, TGrouping>> groupingExpr)
    {
        if (groupingExpr == null)
            throw new ArgumentNullException(nameof(groupingExpr));

        this.visitor.GroupBy(groupingExpr);
        return new FromGroupingQuery<T, TGrouping>(this.connection, this.transaction, this.ormProvider, this.visitor);
    }
    public IFromQuery<T> OrderBy<TFields>(Expression<Func<T, TFields>> fieldsExpr)
    {
        if (fieldsExpr == null)
            throw new ArgumentNullException(nameof(fieldsExpr));

        this.visitor.OrderBy("ASC", fieldsExpr);
        return this;
    }
    public IFromQuery<T> OrderBy<TFields>(bool condition, Expression<Func<T, TFields>> fieldsExpr)
    {
        if (fieldsExpr == null)
            throw new ArgumentNullException(nameof(fieldsExpr));
        if (condition)
            this.visitor.OrderBy("ASC", fieldsExpr);
        return this;
    }
    public IFromQuery<T> OrderByDescending<TFields>(Expression<Func<T, TFields>> fieldsExpr)
    {
        if (fieldsExpr == null)
            throw new ArgumentNullException(nameof(fieldsExpr));

        this.visitor.OrderBy("DESC", fieldsExpr);
        return this;
    }
    public IFromQuery<T> OrderByDescending<TFields>(bool condition, Expression<Func<T, TFields>> fieldsExpr)
    {
        if (fieldsExpr == null)
            throw new ArgumentNullException(nameof(fieldsExpr));

        if(condition)
            this.visitor.OrderBy("DESC", fieldsExpr);
        return this;
    }
    #endregion

    #region Distinct
    public IFromQuery<T> Distinct()
    {
        this.visitor.Distinct();
        return this;
    }
    #endregion
    
    #region Take
    public IFromQuery<T> Take(int limit)
    {
        this.visitor.Take(limit);
        return this;
    }
    #endregion

    #region Select
    public IFromQuery<T> Select()
    {
        Expression<Func<T, T>> defaultExpr = f => f;
        this.visitor.Select(null, defaultExpr, true);
        return this;
    }
    public IQueryAnonymousObject Select(string fields)
    {
        if(string.IsNullOrEmpty(fields))
            throw new ArgumentNullException(nameof(fields));

        this.visitor.Select(fields, null, true);
        return new QueryAnonymousObject(this.visitor);
    }
    public IFromQuery<TTarget> Select<TTarget>(string fields)
    {
        if (string.IsNullOrEmpty(fields))
            throw new ArgumentNullException(nameof(fields));

        this.visitor.Select(fields, null, true);
        return new FromQuery<TTarget>(this.connection, this.transaction, this.ormProvider, this.visitor);
    }
    public IFromQuery<TTarget> Select<TTarget>(Expression<Func<T, TTarget>> fieldsExpr)
    {
        if (fieldsExpr == null)
            throw new ArgumentNullException(nameof(fieldsExpr));

        this.visitor.Select(null, fieldsExpr, true);
        return new FromQuery<TTarget>(this.connection, this.transaction, this.ormProvider, this.visitor);
    }
    public IFromQuery<TTarget> SelectAggregate<TTarget>(Expression<Func<IAggregateSelect, T, TTarget>> fieldsExpr)
    {
        if (fieldsExpr == null)
            throw new ArgumentNullException(nameof(fieldsExpr));

        this.visitor.Select(null, fieldsExpr, true);
        return new FromQuery<TTarget>(this.connection, this.transaction, this.ormProvider, this.visitor);
    }
    #endregion

    #region ToSql
    public string ToSql(out List<IDbDataParameter> dbParameters)
        => this.visitor.BuildSql(out dbParameters, out _);
    #endregion
}
<#
    count = 16;
    tables = "T1";
    for (int i = 2; i < count; i++)
    {
        tables += $", T{i}";
#>
class FromQuery<<#=tables#>> : FromQueryBase, IFromQuery<<#=tables#>>
{
    #region Constructor
    public FromQuery(TheaConnection connection, IDbTransaction transaction, IOrmProvider ormProvider, IQueryVisitor visitor)
        : base(connection, transaction, ormProvider, visitor) { }
    #endregion

    #region Join
    public IFromQuery<<#=tables#>> InnerJoin(Expression<Func<<#=tables#>, bool>> joinOn)
    {
        if (joinOn == null)
            throw new ArgumentNullException(nameof(joinOn));

        this.visitor.Join("INNER JOIN", joinOn);
        return this;
    }
    public IFromQuery<<#=tables#>> LeftJoin(Expression<Func<<#=tables#>, bool>> joinOn)
    {
        if (joinOn == null)
            throw new ArgumentNullException(nameof(joinOn));

        this.visitor.Join("LEFT JOIN", joinOn);
        return this;
    }
    public IFromQuery<<#=tables#>> RightJoin(Expression<Func<<#=tables#>, bool>> joinOn)
    {
        if (joinOn == null)
            throw new ArgumentNullException(nameof(joinOn));

        this.visitor.Join("RIGHT JOIN", joinOn);
        return this;
    }
<#
        if(i < count - 1)
        {
#>
    public IFromQuery<<#=tables#>, TOther> InnerJoin<TOther>(Expression<Func<<#=tables#>, TOther, bool>> joinOn)
    {
        if (joinOn == null)
            throw new ArgumentNullException(nameof(joinOn));

        this.visitor.Join("INNER JOIN", typeof(TOther), joinOn);
        return new FromQuery<<#=tables#>, TOther>(this.connection, this.transaction, this.ormProvider, this.visitor);
    }
    public IFromQuery<<#=tables#>, TOther> LeftJoin<TOther>(Expression<Func<<#=tables#>, TOther, bool>> joinOn)
    {
        if (joinOn == null)
            throw new ArgumentNullException(nameof(joinOn));

        this.visitor.Join("LEFT JOIN", typeof(TOther), joinOn);
        return new FromQuery<<#=tables#>, TOther>(this.connection, this.transaction, this.ormProvider, this.visitor);
    }
    public IFromQuery<<#=tables#>, TOther> RightJoin<TOther>(Expression<Func<<#=tables#>, TOther, bool>> joinOn)
    {
        if (joinOn == null)
            throw new ArgumentNullException(nameof(joinOn));

        this.visitor.Join("RIGHT JOIN", typeof(TOther), joinOn);
        return new FromQuery<<#=tables#>, TOther>(this.connection, this.transaction, this.ormProvider, this.visitor);
    }
    public IFromQuery<<#=tables#>, TTarget> InnerJoinRecursive<TTarget>(IFromQuery<TTarget> target, string cteTableName, Expression<Func<<#=tables#>, TTarget, bool>> joinOn)
    {
        if (joinOn == null)
            throw new ArgumentNullException(nameof(joinOn));

        this.visitor.Join("INNER JOIN", typeof(TTarget), cteTableName, joinOn);
        return new FromQuery<<#=tables#>, TTarget>(this.connection, this.transaction, this.ormProvider, this.visitor);
    }
    public IFromQuery<<#=tables#>, TTarget> LeftJoinRecursive<TTarget>(IFromQuery<TTarget> target, string cteTableName, Expression<Func<<#=tables#>, TTarget, bool>> joinOn)
    {
        if (joinOn == null)
            throw new ArgumentNullException(nameof(joinOn));

        this.visitor.Join("LEFT JOIN", typeof(TTarget), cteTableName, joinOn);
        return new FromQuery<<#=tables#>, TTarget>(this.connection, this.transaction, this.ormProvider, this.visitor);
    }
    public IFromQuery<<#=tables#>, TTarget> RightJoinRecursive<TTarget>(IFromQuery<TTarget> target, string cteTableName, Expression<Func<<#=tables#>, TTarget, bool>> joinOn)
    {
        if (joinOn == null)
            throw new ArgumentNullException(nameof(joinOn));

        this.visitor.Join("RIGHT JOIN", typeof(TTarget), cteTableName, joinOn);
        return new FromQuery<<#=tables#>, TTarget>(this.connection, this.transaction, this.ormProvider, this.visitor);
    }
<#      }#>
    #endregion
<#
        if(i < count - 1)
        {
#>

    #region WithTable
    public IQuery<<#=tables#>, TOther> WithTable<TOther>(Func<IFromQuery, IFromQuery<TOther>> subQuery)
    {
        if (subQuery == null)
            throw new ArgumentNullException(nameof(subQuery));

        var newVisitor = this.visitor.Clone();
        subQuery.Invoke(new FromQuery(newVisitor));
        var sql = newVisitor.BuildSql(out var readerFields);
        this.visitor.WithTable(typeof(TOther), sql, readerFields);
        return new Query<<#=tables#>, TOther>(this.connection, this.transaction, this.ormProvider, this.visitor);
    }
    #endregion

<#      }#>
    #region Where/And
    public IFromQuery<<#=tables#>> Where(Expression<Func<<#=tables#>, bool>> predicate)
    {
        if (predicate == null)
            throw new ArgumentNullException(nameof(predicate));

        this.visitor.Where(predicate);
        return this;
    }
    public IFromQuery<<#=tables#>> Where(bool condition, Expression<Func<<#=tables#>, bool>> ifPredicate, Expression<Func<<#=tables#>, bool>> elsePredicate = null)
    {
        if (ifPredicate == null)
            throw new ArgumentNullException(nameof(ifPredicate));

        if (condition)
            this.visitor.Where(ifPredicate);
        else if (elsePredicate != null) this.visitor.Where(elsePredicate);
        return this;
    }
    public IFromQuery<<#=tables#>> And(Expression<Func<<#=tables#>, bool>> predicate)
    {
        if (predicate == null)
            throw new ArgumentNullException(nameof(predicate));

        this.visitor.And(predicate);
        return this;
    }
    public IFromQuery<<#=tables#>> And(bool condition, Expression<Func<<#=tables#>, bool>> ifPredicate, Expression<Func<<#=tables#>, bool>> elsePredicate = null)
    {
        if (ifPredicate == null)
            throw new ArgumentNullException(nameof(ifPredicate));

        if (condition)
            this.visitor.And(ifPredicate);
        else if (elsePredicate != null) this.visitor.And(elsePredicate);
        return this;
    }
    #endregion

<#
        if(i < count - 1)
        {
#>
    #region GroupBy
    public IFromGroupingQuery<<#=tables#>, TGrouping> GroupBy<TGrouping>(Expression<Func<<#=tables#>, TGrouping>> groupingExpr)
    {
        if (groupingExpr == null)
            throw new ArgumentNullException(nameof(groupingExpr));

        this.visitor.GroupBy(groupingExpr);
        return new FromGroupingQuery<<#=tables#>, TGrouping>(this.connection, this.transaction, this.ormProvider, this.visitor);
    }
    #endregion

<#      }#>
    #region OrderBy
    public IFromQuery<<#=tables#>> OrderBy<TFields>(Expression<Func<<#=tables#>, TFields>> fieldsExpr)
    {
        if (fieldsExpr == null)
            throw new ArgumentNullException(nameof(fieldsExpr));

        this.visitor.OrderBy("ASC", fieldsExpr);
        return this;
    }
    public IFromQuery<<#=tables#>> OrderBy<TFields>(bool condition, Expression<Func<<#=tables#>, TFields>> fieldsExpr)
    {
        if (fieldsExpr == null)
            throw new ArgumentNullException(nameof(fieldsExpr));

        if (condition)
            this.visitor.OrderBy("ASC", fieldsExpr);
        return this;
    }
    public IFromQuery<<#=tables#>> OrderByDescending<TFields>(Expression<Func<<#=tables#>, TFields>> fieldsExpr)
    {
        if (fieldsExpr == null)
            throw new ArgumentNullException(nameof(fieldsExpr));

        this.visitor.OrderBy("DESC", fieldsExpr);
        return this;
    }
    public IFromQuery<<#=tables#>> OrderByDescending<TFields>(bool condition, Expression<Func<<#=tables#>, TFields>> fieldsExpr)
    {
        if (fieldsExpr == null)
            throw new ArgumentNullException(nameof(fieldsExpr));

        if (condition)
            this.visitor.OrderBy("DESC", fieldsExpr);
        return this;
    }
    #endregion

    #region Select
    public IFromQuery<TTarget> Select<TTarget>(Expression<Func<<#=tables#>, TTarget>> fieldsExpr)
    {
        if (fieldsExpr == null)
            throw new ArgumentNullException(nameof(fieldsExpr));

        this.visitor.Select(null, fieldsExpr, true);
        return new FromQuery<TTarget>(this.connection, this.transaction, this.ormProvider, this.visitor);
    }
    public IFromQuery<TTarget> SelectAggregate<TTarget>(Expression<Func<IAggregateSelect, <#=tables#>, TTarget>> fieldsExpr)
    {
        if (fieldsExpr == null)
            throw new ArgumentNullException(nameof(fieldsExpr));

        this.visitor.Select(null, fieldsExpr, true);
        return new FromQuery<TTarget>(this.connection, this.transaction, this.ormProvider, this.visitor);
    }
    #endregion
}
<#  }#>