<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq.Expressions;
using System.Text;

namespace Trolley;

public class MultipleQuery : IMultipleQuery, IDisposable
{
    #region Fields
    protected StringBuilder sqlBuilder = new();
    #endregion

    #region Properties
    public DbContext DbContext { get; protected set; }
    public string DbKey => this.DbContext.DbKey;
    public IOrmProvider OrmProvider => this.DbContext.OrmProvider;
    public IEntityMapProvider MapProvider => this.DbContext.MapProvider;
    public IDbCommand Command { get; private set; }
    public List<ReaderAfter> ReaderAfters { get; private set; }
    #endregion

    #region Constructor
    public MultipleQuery(DbContext dbContext, IDbCommand command)
    {
        this.DbContext = dbContext;
        this.Command = command;
        this.ReaderAfters = new();
    }
    #endregion

    #region From
    public IMultiQuery<T> From<T>(char tableAsStart = 'a')
    {
        var visitor = this.CreateQueryVisitor(tableAsStart);
        visitor.From(tableAsStart, typeof(T));
        return this.OrmProvider.NewMultiQuery<T>(this, visitor);
    }
<#
    var count = 10;
    var tables = "T1";
    var typeOfTables = "typeof(T1)";
    for (int i = 2; i <= count; i++)
    {
        tables += $", T{i}";
        typeOfTables += $", typeof(T{i})";
#>
    public IMultiQuery<<#=tables#>> From<<#=tables#>>(char tableAsStart = 'a')
    {
        var visitor = this.CreateQueryVisitor(tableAsStart);
        visitor.From(tableAsStart, <#=typeOfTables#>);
        return this.OrmProvider.NewMultiQuery<<#=tables#>>(this, visitor);
    }
<#  }#>
    #endregion
	
    #region From SubQuery
    public IMultiQuery<T> From<T>(Func<IFromQuery, IQuery<T>> subQuery, char tableAsStart = 'a')
    {
        var visitor = this.CreateQueryVisitor(tableAsStart);
        visitor.From(typeof(T), this.DbContext, subQuery);
        return this.OrmProvider.NewMultiQuery<T>(this, visitor);
    }
    #endregion

    #region QueryFirst/Query
    public IMultipleQuery QueryFirst<TEntity>(string rawSql)
    {
        if (string.IsNullOrEmpty(rawSql))
            throw new ArgumentNullException(nameof(rawSql));

        var targetType = typeof(TEntity);
        Func<ITheaDataReader, object> readerGetter;
        if (targetType.IsEntityType(out _))
            readerGetter = reader => reader.To<TEntity>(this.DbContext);
        else readerGetter = reader => reader.To<TEntity>();
        this.AddReader(targetType, rawSql, readerGetter);
        return this;
    }
    public IMultipleQuery QueryFirst<TEntity>(string rawSql, object parameters)
    {
        if (string.IsNullOrEmpty(rawSql))
            throw new ArgumentNullException(nameof(rawSql));
        if (parameters == null)
            throw new ArgumentNullException(nameof(parameters));

        var commandInitializer = RepositoryHelper.BuildQueryRawSqlParameters(this.DbKey, this.OrmProvider, rawSql, parameters);
        commandInitializer.Invoke(this.Command.Parameters, this.OrmProvider, parameters);

        var targetType = typeof(TEntity);
        Func<ITheaDataReader, object> readerGetter;
        if (targetType.IsEntityType(out _))
            readerGetter = reader => reader.To<TEntity>(this.DbContext);
        else readerGetter = reader => reader.To<TEntity>();
        this.AddReader(targetType, rawSql, readerGetter);
        return this;
    }
    public IMultipleQuery QueryFirst<TEntity>(object whereObj)
    {
        if (whereObj == null)
            throw new ArgumentNullException(nameof(whereObj));

        var targetType = typeof(TEntity);
        var commandInitializer = RepositoryHelper.BuildQueryWhereObjSqlParameters(this.DbKey, this.DbContext, this.MapProvider, targetType, whereObj, true);
        var typedCommandInitializer = commandInitializer as Func<IDataParameterCollection, DbContext, object, string, string>;
        var sql = typedCommandInitializer.Invoke(this.Command.Parameters, this.DbContext, whereObj, $"_m{this.ReaderAfters.Count}");

        Func<ITheaDataReader, object> readerGetter = reader => reader.To<TEntity>(this.DbContext);
        this.AddReader(targetType, sql, readerGetter);
        return this;
    }
    public IMultipleQuery Query<TEntity>(string rawSql)
    {
        if (string.IsNullOrEmpty(rawSql))
            throw new ArgumentNullException(nameof(rawSql));

        var targetType = typeof(TEntity);
        Func<ITheaDataReader, object> readerGetter;
        if (targetType.IsEntityType(out _))
            readerGetter = reader => reader.To<TEntity>(this.DbContext);
        else readerGetter = reader => reader.To<TEntity>();
        this.AddReader(targetType, rawSql, readerGetter);
        return this;
    }
    public IMultipleQuery Query<TEntity>(string rawSql, object parameters)
    {
        if (string.IsNullOrEmpty(rawSql))
            throw new ArgumentNullException(nameof(rawSql));
        if (parameters == null)
            throw new ArgumentNullException(nameof(parameters));

        var commandInitializer = RepositoryHelper.BuildQueryRawSqlParameters(this.DbKey, this.OrmProvider, rawSql, parameters);
        commandInitializer.Invoke(this.Command.Parameters, this.OrmProvider, parameters);

        var targetType = typeof(TEntity);
        Func<ITheaDataReader, object> readerGetter;
        if (targetType.IsEntityType(out _))
            readerGetter = reader => reader.To<TEntity>(this.DbContext);
        else readerGetter = reader => reader.To<TEntity>();
        this.AddReader(targetType, rawSql, readerGetter);
        return this;
    }
    public IMultipleQuery Query<TEntity>(object whereObj)
    {
        if (whereObj == null)
            throw new ArgumentNullException(nameof(whereObj));

        var targetType = typeof(TEntity);
        var commandInitializer = RepositoryHelper.BuildQueryWhereObjSqlParameters(this.DbKey, this.DbContext, this.MapProvider, targetType, whereObj, true);
        var typedCommandInitializer = commandInitializer as Func<IDataParameterCollection, DbContext, object, string, string>;
        var sql = typedCommandInitializer.Invoke(this.Command.Parameters, this.DbContext, whereObj, $"_m{this.ReaderAfters.Count}");

        Func<ITheaDataReader, object> readerGetter = reader => reader.To<TEntity>(this.DbContext);
        this.AddReader(targetType, sql, readerGetter);
        return this;
    }
    #endregion

    #region Get
    public IMultipleQuery Get<TEntity>(object whereObj)
    {
        if (whereObj == null)
            throw new ArgumentNullException(nameof(whereObj));

        var targetType = typeof(TEntity);
        var commandInitializer = RepositoryHelper.BuildGetSqlParameters(this.DbKey, this.DbContext, this.MapProvider, targetType, whereObj, true);
        var typedCommandInitializer = commandInitializer as Func<IDataParameterCollection, DbContext, object, string, string>;
        var sql = typedCommandInitializer.Invoke(this.Command.Parameters, this.DbContext, whereObj, $"_m{this.ReaderAfters.Count}");

        Func<ITheaDataReader, object> readerGetter = reader => reader.To<TEntity>(this.DbContext);
        this.AddReader(targetType, sql, readerGetter);
        return this;
    }
    #endregion

    #region Exists
    public IMultipleQuery Exists<TEntity>(object whereObj)
    {
        if (whereObj == null)
            throw new ArgumentNullException(nameof(whereObj));

        var entityType = typeof(TEntity);
        var commandInitializer = RepositoryHelper.BuildExistsSqlParameters(this.DbKey, this.DbContext, this.MapProvider, entityType, whereObj, true);
        var typedCommandInitializer = commandInitializer as Func<IDataParameterCollection, DbContext, object, string, string>;
        var sql = typedCommandInitializer.Invoke(this.Command.Parameters, this.DbContext, whereObj, $"_m{this.ReaderAfters.Count}");

        Func<ITheaDataReader, object> readerGetter = reader => reader.To<int>() > 0;
        this.AddReader(typeof(int), sql, readerGetter);
        return this;
    }
    public IMultipleQuery Exists<TEntity>(Expression<Func<TEntity, bool>> wherePredicate)
    {
        if (wherePredicate == null)
            throw new ArgumentNullException(nameof(wherePredicate));

        var sql = this.From<TEntity>().Where(wherePredicate)
            .Select(f => Sql.Count()).ToSql(out _);
        Func<ITheaDataReader, object> readerGetter = reader => reader.To<int>() > 0;
        this.AddReader(typeof(int), sql, readerGetter);
        return this;
    }
    #endregion

    #region AddReader/BuildSql
    public void AddReader(Type targetType, string sql, Func<ITheaDataReader, object> readerGetter, IQueryVisitor queryVisitor = null, int pageIndex = 0, int pageSize = 0)
    {
        if (this.sqlBuilder.Length > 0)
            this.sqlBuilder.Append(';');
        this.sqlBuilder.Append(sql);
        this.ReaderAfters.Add(new ReaderAfter
        {
            TargetType = targetType,
            ReaderGetter = readerGetter,
            QueryVisitor = queryVisitor,
            PageIndex = pageIndex,
            PageSize = pageSize
        });
    }
    public string BuildSql(out List<ReaderAfter> readerAfters)
    {
        var sql = this.sqlBuilder.ToString();
        this.sqlBuilder.Clear();
        readerAfters = this.ReaderAfters;
        return sql;
    }
    #endregion

    #region Dispose
    public void Dispose()
    {
        this.sqlBuilder = null;
        this.ReaderAfters = null;
        this.Command = null;
    }
    #endregion

    private IQueryVisitor CreateQueryVisitor(char tableAsStart)
    {
        var visitor = this.OrmProvider.NewQueryVisitor(this.DbKey, this.MapProvider, this.DbContext.IsParameterized, tableAsStart);
        visitor.DbParameters = this.Command.Parameters;
        //TODO:支持CTE
        return visitor;
    }
}
public class ReaderAfter
{
    public Type TargetType { get; set; }
    public Func<ITheaDataReader, object> ReaderGetter { get; set; }
    public IQueryVisitor QueryVisitor { get; set; }
    public int PageIndex { get; set; }
    public int PageSize { get; set; }
}
