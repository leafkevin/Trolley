<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Linq.Expressions;

namespace Trolley;

class MultiIncludableQuery<T, TMember> : MultiQuery<T>, IMultiIncludableQuery<T, TMember>
{
    public MultiIncludableQuery(MultipleQuery multiQuery, IQueryVisitor visitor, int withIndex)
        : base(multiQuery, visitor, withIndex) { }

    public IMultiIncludableQuery<T, TNavigation> ThenInclude<TNavigation>(Expression<Func<TMember, TNavigation>> member)
    {
        this.visitor.ThenInclude(member);
        return new MultiIncludableQuery<T, TNavigation>(this.multiQuery, this.visitor, this.withIndex);
    }
    public IMultiIncludableQuery<T, TElment> ThenIncludeMany<TElment>(Expression<Func<TMember, IEnumerable<TElment>>> member, Expression<Func<TElment, bool>> filter = null)
    {
        this.visitor.ThenInclude(member, true, filter);
        return new MultiIncludableQuery<T, TElment>(this.multiQuery, this.visitor, this.withIndex);
    }
}
<#
    var count = 15;
    var tables = "T1";
    for (int i = 2; i < count; i++)
    {
        tables += $", T{i}";
#>
class MultiIncludableQuery<<#=tables#>, TMember> : MultiQuery<<#=tables#>>, IMultiIncludableQuery<<#=tables#>, TMember>
{
    public MultiIncludableQuery(MultipleQuery multiQuery, IQueryVisitor visitor, int withIndex)
        : base(multiQuery, visitor, withIndex) { }

    public IMultiIncludableQuery<<#=tables#>, TNavigation> ThenInclude<TNavigation>(Expression<Func<TMember, TNavigation>> member)
    {
        this.visitor.ThenInclude(member);
        return new MultiIncludableQuery<<#=tables#>, TNavigation>(this.multiQuery, this.visitor, this.withIndex);
    }
    public IMultiIncludableQuery<<#=tables#>, TElment> ThenIncludeMany<TElment>(Expression<Func<TMember, IEnumerable<TElment>>> member, Expression<Func<TElment, bool>> filter = null)
    {
        this.visitor.ThenInclude(member, true, filter);
        return new MultiIncludableQuery<<#=tables#>, TElment>(this.multiQuery, this.visitor, this.withIndex);
    }
}
<#  }
    tables += $", T{count}";
#>
class MultiIncludableQuery<<#=tables#>, TMember> : MultiQuery<<#=tables#>>, IMultiIncludableQuery<<#=tables#>, TMember>
{
     public MultiIncludableQuery(MultipleQuery multiQuery, IQueryVisitor visitor, int withIndex)
        : base(multiQuery, visitor, withIndex) { }
}