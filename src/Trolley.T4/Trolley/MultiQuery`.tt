<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Linq.Expressions;

namespace Trolley;

<#
    var count = 16;
    var tables = "T1";
    var cteQueryTables = "IMultiQuery<T1>";
    var cteQueryRefs = "this.visitor.CteQueries[0]";
    for (int i = 2; i <= count; i++)
    {
        tables += $", T{i}";
        cteQueryTables += $", IMultiQuery<T{i}>";
        cteQueryRefs += $", this.visitor.CteQueries[{i-1}]";
#>
class MultiQuery<<#=tables#>> : MultiQueryBase, IMultiQuery<<#=tables#>>
{
    #region Constructor
    public MultiQuery(MultipleQuery multiQuery, IQueryVisitor visitor)
        : base(multiQuery, visitor) { }
    #endregion

<#
        if(i < 7)
        {
#>
    #region CTE NextWith
    public IMultiQuery<<#=tables#>, TOther> NextWith<TOther>(Func<IFromQuery, <#=cteQueryTables#>, IQuery<TOther>> cteSubQuery, string cteTableName = "cte", char tableAsStart = 'a')
    {
        if (cteSubQuery == null)
            throw new ArgumentNullException(nameof(cteSubQuery));

        this.visitor.Clear(true);
        var fromQuery = new FromQuery(this.connection, this.transaction, this.ormProvider, this.mapProvider, this.visitor);
        var query = (IQuery<TOther>)cteSubQuery.DynamicInvoke(fromQuery, <#=cteQueryRefs#>);
        var rawSql = this.visitor.BuildSql(out var readerFields, false);
        if (!this.visitor.Equals(query.Visitor))
            query.Visitor.CopyTo(this.visitor);

        this.visitor.BuildCteTable(cteTableName, rawSql, readerFields, query, true);
        return new MultiQuery<<#=tables#>, TOther>(this.multiQuery, this.visitor);
    }
    #endregion

<#      }
        if(i < count)
        {
#>
    #region WithTable
    public IMultiQuery<<#=tables#>, TOther> WithTable<TOther>(Func<IFromQuery, IQuery<TOther>> subQuery)
    {
        if (subQuery == null)
            throw new ArgumentNullException(nameof(subQuery));

        var fromQuery = new FromQuery(this.connection, this.transaction, this.ormProvider, this.mapProvider, visitor);
        var query = subQuery.Invoke(fromQuery);
        var sql = this.visitor.BuildSql(out var readerFields);
        if (!this.visitor.Equals(query.Visitor))
            query.Visitor.CopyTo(this.visitor);

        this.visitor.WithTable(typeof(TOther), sql, readerFields);
         return new MultiQuery<<#=tables#>, TOther>(this.multiQuery, this.visitor);
    }
    #endregion

<#      }#>
    #region Join
    public IMultiQuery<<#=tables#>> InnerJoin(Expression<Func<<#=tables#>, bool>> joinOn)
    {
        if (joinOn == null)
            throw new ArgumentNullException(nameof(joinOn));

        this.visitor.Join("INNER JOIN", joinOn);
        return this;
    }
    public IMultiQuery<<#=tables#>> LeftJoin(Expression<Func<<#=tables#>, bool>> joinOn)
    {
        if (joinOn == null)
            throw new ArgumentNullException(nameof(joinOn));

        this.visitor.Join("LEFT JOIN", joinOn);
        return this;
    }
    public IMultiQuery<<#=tables#>> RightJoin(Expression<Func<<#=tables#>, bool>> joinOn)
    {
        if (joinOn == null)
            throw new ArgumentNullException(nameof(joinOn));

        this.visitor.Join("RIGHT JOIN", joinOn);
        return this;
    }
<#
        if(i < count)
        {
#>
    public IMultiQuery<<#=tables#>, TOther> InnerJoin<TOther>(Expression<Func<<#=tables#>, TOther, bool>> joinOn)
    {
        if (joinOn == null)
            throw new ArgumentNullException(nameof(joinOn));

        this.visitor.Join("INNER JOIN", typeof(TOther), joinOn);
        return new MultiQuery<<#=tables#>, TOther>(this.multiQuery, this.visitor);
    }
    public IMultiQuery<<#=tables#>, TOther> LeftJoin<TOther>(Expression<Func<<#=tables#>, TOther, bool>> joinOn)
    {
        if (joinOn == null)
            throw new ArgumentNullException(nameof(joinOn));

        this.visitor.Join("LEFT JOIN", typeof(TOther), joinOn);
        return new MultiQuery<<#=tables#>, TOther>(this.multiQuery, this.visitor);
    }
    public IMultiQuery<<#=tables#>, TOther> RightJoin<TOther>(Expression<Func<<#=tables#>, TOther, bool>> joinOn)
    {
        if (joinOn == null)
            throw new ArgumentNullException(nameof(joinOn));

        this.visitor.Join("RIGHT JOIN", typeof(TOther), joinOn);
        return new MultiQuery<<#=tables#>, TOther>(this.multiQuery, this.visitor);
    }
    public IMultiQuery<<#=tables#>, TOther> InnerJoin<TOther>(IMultiQuery<TOther> subQuery, Expression<Func<<#=tables#>, TOther, bool>> joinOn)
    {
        if (subQuery == null)
            throw new ArgumentNullException(nameof(subQuery));
        if (joinOn == null)
            throw new ArgumentNullException(nameof(joinOn));

        var sql = subQuery.Visitor.BuildSql(out var readerFields, false);
        if (!this.visitor.Equals(subQuery.Visitor))
            subQuery.Visitor.CopyTo(this.visitor);

        var tableSegment = this.visitor.WithTable(typeof(TOther), sql, readerFields, false, subQuery);
        this.visitor.Join("INNER JOIN", tableSegment, joinOn);
        return new MultiQuery<<#=tables#>, TOther>(this.multiQuery, this.visitor);
    }
    public IMultiQuery<<#=tables#>, TOther> LeftJoin<TOther>(IMultiQuery<TOther> subQuery, Expression<Func<<#=tables#>, TOther, bool>> joinOn)
    {
        if (subQuery == null)
            throw new ArgumentNullException(nameof(subQuery));
        if (joinOn == null)
            throw new ArgumentNullException(nameof(joinOn));

        var sql = subQuery.Visitor.BuildSql(out var readerFields, false);
        if (!this.visitor.Equals(subQuery.Visitor))
            subQuery.Visitor.CopyTo(this.visitor);

        var tableSegment = this.visitor.WithTable(typeof(TOther), sql, readerFields, false, subQuery);
        this.visitor.Join("LEFT JOIN", tableSegment, joinOn);
        return new MultiQuery<<#=tables#>, TOther>(this.multiQuery, this.visitor);
    }
    public IMultiQuery<<#=tables#>, TOther> RightJoin<TOther>(IMultiQuery<TOther> subQuery, Expression<Func<<#=tables#>, TOther, bool>> joinOn)
    {
        if (subQuery == null)
            throw new ArgumentNullException(nameof(subQuery));
        if (joinOn == null)
            throw new ArgumentNullException(nameof(joinOn));

        var sql = subQuery.Visitor.BuildSql(out var readerFields, false);
        if (!this.visitor.Equals(subQuery.Visitor))
            subQuery.Visitor.CopyTo(this.visitor);

        var tableSegment = this.visitor.WithTable(typeof(TOther), sql, readerFields, false, subQuery);
        this.visitor.Join("RIGHT JOIN", tableSegment, joinOn);
        return new MultiQuery<<#=tables#>, TOther>(this.multiQuery, this.visitor);
    }
    public IMultiQuery<<#=tables#>, TOther> InnerJoin<TOther>(Func<IFromQuery, IQuery<TOther>> subQuery, Expression<Func<<#=tables#>, TOther, bool>> joinOn)
    {
        if (subQuery == null)
            throw new ArgumentNullException(nameof(subQuery));
        if (joinOn == null)
            throw new ArgumentNullException(nameof(joinOn));

        var fromQuery = new FromQuery(this.connection, this.transaction, this.ormProvider, this.mapProvider, this.visitor);
        var query = subQuery.Invoke(fromQuery);
        var sql = query.Visitor.BuildSql(out var readerFields, false);
        if (!this.visitor.Equals(query.Visitor))
            query.Visitor.CopyTo(this.visitor);

        var tableSegment = this.visitor.WithTable(typeof(TOther), sql, readerFields, false, query);
        this.visitor.Join("INNER JOIN", tableSegment, joinOn);
        return new MultiQuery<<#=tables#>, TOther>(this.multiQuery, this.visitor);
    }
    public IMultiQuery<<#=tables#>, TOther> LeftJoin<TOther>(Func<IFromQuery, IQuery<TOther>> subQuery, Expression<Func<<#=tables#>, TOther, bool>> joinOn)
    {
        if (subQuery == null)
            throw new ArgumentNullException(nameof(subQuery));
        if (joinOn == null)
            throw new ArgumentNullException(nameof(joinOn));

        var fromQuery = new FromQuery(this.connection, this.transaction, this.ormProvider, this.mapProvider, this.visitor);
        var query = subQuery.Invoke(fromQuery);
        var sql = query.Visitor.BuildSql(out var readerFields, false);
        if (!this.visitor.Equals(query.Visitor))
            query.Visitor.CopyTo(this.visitor);

        var tableSegment = this.visitor.WithTable(typeof(TOther), sql, readerFields, false, query);
        this.visitor.Join("LEFT JOIN", tableSegment, joinOn);
        return new MultiQuery<<#=tables#>, TOther>(this.multiQuery, this.visitor);
    }
    public IMultiQuery<<#=tables#>, TOther> RightJoin<TOther>(Func<IFromQuery, IQuery<TOther>> subQuery, Expression<Func<<#=tables#>, TOther, bool>> joinOn)
    {
        if (subQuery == null)
            throw new ArgumentNullException(nameof(subQuery));
        if (joinOn == null)
            throw new ArgumentNullException(nameof(joinOn));

        var fromQuery = new FromQuery(this.connection, this.transaction, this.ormProvider, this.mapProvider, this.visitor);
        var query = subQuery.Invoke(fromQuery);
        var sql = query.Visitor.BuildSql(out var readerFields, false);
        if (!this.visitor.Equals(query.Visitor))
            query.Visitor.CopyTo(this.visitor);

        var tableSegment = this.visitor.WithTable(typeof(TOther), sql, readerFields, false, query);
        this.visitor.Join("RIGHT JOIN", tableSegment, joinOn);
        return new MultiQuery<<#=tables#>, TOther>(this.multiQuery, this.visitor);
    }
<#      }#>
    #endregion

    #region Include
    public IMultiIncludableQuery<<#=tables#>, TMember> Include<TMember>(Expression<Func<<#=tables#>, TMember>> memberSelector)
    {
        if (memberSelector == null)
            throw new ArgumentNullException(nameof(memberSelector));

        this.visitor.Include(memberSelector);
        return new MultiIncludableQuery<<#=tables#>, TMember>(this.multiQuery, this.visitor);
    }
    public IMultiIncludableQuery<<#=tables#>, TElment> IncludeMany<TElment>(Expression<Func<<#=tables#>, IEnumerable<TElment>>> memberSelector, Expression<Func<TElment, bool>> filter = null)
    {
        if (memberSelector == null)
            throw new ArgumentNullException(nameof(memberSelector));

        this.visitor.Include(memberSelector, true, filter);
        return new MultiIncludableQuery<<#=tables#>, TElment>(this.multiQuery, this.visitor);
    }
    #endregion

    #region Where/And
    public IMultiQuery<<#=tables#>> Where(Expression<Func<<#=tables#>, bool>> predicate)
    {
        if (predicate == null)
            throw new ArgumentNullException(nameof(predicate));

        this.visitor.Where(predicate);
        return this;
    }
    public IMultiQuery<<#=tables#>> Where(bool condition, Expression<Func<<#=tables#>, bool>> ifPredicate, Expression<Func<<#=tables#>, bool>> elsePredicate = null)
    {
        if (ifPredicate == null)
            throw new ArgumentNullException(nameof(ifPredicate));

        if (condition)
            this.visitor.Where(ifPredicate);
        else if (elsePredicate != null) this.visitor.Where(elsePredicate);
        return this;
    }
    public IMultiQuery<<#=tables#>> And(Expression<Func<<#=tables#>, bool>> predicate)
    {
        if (predicate == null)
            throw new ArgumentNullException(nameof(predicate));

        this.visitor.And(predicate);
        return this;
    }
    public IMultiQuery<<#=tables#>> And(bool condition, Expression<Func<<#=tables#>, bool>> ifPredicate, Expression<Func<<#=tables#>, bool>> elsePredicate = null)
    {
        if (ifPredicate == null)
            throw new ArgumentNullException(nameof(ifPredicate));

        if (condition)
            this.visitor.And(ifPredicate);
        else if (elsePredicate != null) this.visitor.And(elsePredicate);
        return this;
    }
    #endregion

    #region GroupBy
    public IMultiGroupingQuery<<#=tables#>, TGrouping> GroupBy<TGrouping>(Expression<Func<<#=tables#>, TGrouping>> groupingExpr)
    {
        if (groupingExpr == null)
            throw new ArgumentNullException(nameof(groupingExpr));

        this.visitor.GroupBy(groupingExpr);
        return new MultiGroupingQuery<<#=tables#>, TGrouping>(this.multiQuery, this.visitor);
    }
    #endregion

    #region OrderBy
    public IMultiQuery<<#=tables#>> OrderBy<TFields>(Expression<Func<<#=tables#>, TFields>> fieldsExpr)
        => this.OrderBy(true, fieldsExpr);

    public IMultiQuery<<#=tables#>> OrderBy<TFields>(bool condition, Expression<Func<<#=tables#>, TFields>> fieldsExpr)
    {
        if (fieldsExpr == null)
            throw new ArgumentNullException(nameof(fieldsExpr));

        if (condition)
            this.visitor.OrderBy("ASC", fieldsExpr);
        return this;
    }
    public IMultiQuery<<#=tables#>> OrderByDescending<TFields>(Expression<Func<<#=tables#>, TFields>> fieldsExpr)
        => this.OrderByDescending(true, fieldsExpr);

    public IMultiQuery<<#=tables#>> OrderByDescending<TFields>(bool condition, Expression<Func<<#=tables#>, TFields>> fieldsExpr)
    {
        if (fieldsExpr == null)
            throw new ArgumentNullException(nameof(fieldsExpr));

        if (condition)
            this.visitor.OrderBy("DESC", fieldsExpr);
        return this;
    }
    #endregion

    #region Select 
    public IMultiQuery<TTarget> Select<TTarget>(Expression<Func<<#=tables#>, TTarget>> fieldsExpr)
    {
        if (fieldsExpr == null)
            throw new ArgumentNullException(nameof(fieldsExpr));

        this.visitor.Select(null, fieldsExpr);
        return new MultiQuery<TTarget>(this.multiQuery, this.visitor);
    }
<#
        if(i < count)
        {
#>
    public IMultiQuery<TTarget> SelectAggregate<TTarget>(Expression<Func<IAggregateSelect, <#=tables#>, TTarget>> fieldsExpr)
    {
        if (fieldsExpr == null)
            throw new ArgumentNullException(nameof(fieldsExpr));

        this.visitor.Select(null, fieldsExpr);
        return new MultiQuery<TTarget>(this.multiQuery, this.visitor);
    }
<#      }#>
    #endregion

    #region Count
    public IMultipleQuery Count<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr)
    {
        if (fieldExpr == null)
            throw new ArgumentNullException(nameof(fieldExpr));

        return this.QueryFirstValue<int>("COUNT({0})", fieldExpr);
    }
    public IMultipleQuery CountDistinct<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr)
    {
        if (fieldExpr == null)
            throw new ArgumentNullException(nameof(fieldExpr));

        return this.QueryFirstValue<int>("COUNT(DISTINCT {0})", fieldExpr);
    }
    public IMultipleQuery LongCount<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr)
    {
        if (fieldExpr == null)
            throw new ArgumentNullException(nameof(fieldExpr));

        return this.QueryFirstValue<long>("COUNT({0})", fieldExpr);
    }
    public IMultipleQuery LongCountDistinct<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr)
    {
        if (fieldExpr == null)
            throw new ArgumentNullException(nameof(fieldExpr));

        return this.QueryFirstValue<long>("COUNT(DISTINCT {0})", fieldExpr);
    }
    #endregion

    #region Aggregate
    public IMultipleQuery Sum<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr)
    {
        if (fieldExpr == null)
            throw new ArgumentNullException(nameof(fieldExpr));

        return this.QueryFirstValue<TField>("SUM({0})", fieldExpr);
    }
    public IMultipleQuery Avg<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr)
    {
        if (fieldExpr == null)
            throw new ArgumentNullException(nameof(fieldExpr));

        return this.QueryFirstValue<TField>("AVG({0})", fieldExpr);
    }
    public IMultipleQuery Max<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr)
    {
        if (fieldExpr == null)
            throw new ArgumentNullException(nameof(fieldExpr));

        return this.QueryFirstValue<TField>("MAX({0})", fieldExpr);
    }
    public IMultipleQuery Min<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr)
    {
        if (fieldExpr == null)
            throw new ArgumentNullException(nameof(fieldExpr));

        return this.QueryFirstValue<TField>("MIN({0})", fieldExpr);
    }
    #endregion 
}
<#  }#>