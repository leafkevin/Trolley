<#@ assembly name="$(ProjectDir)\Plugins\MySqlConnector.dll" #>
<#@ import namespace="MySqlConnector" #>
<#+  
class MySqlProvider : DbHelper
{
    private readonly string connectionString;
    public MySqlProvider(string connectionString)
        => this.connectionString = connectionString;
    public List<TableInfo> GetTableList(string database, string[] tableNames)
    {
        var builder = new StringBuilder($"SELECT TABLE_NAME,TABLE_COMMENT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='{database}' AND TABLE_NAME IN (");
        for(int i = 0;i < tableNames.Length;i++)
        {
            if(i > 0)builder.Append(',');
            builder.Append($"'{tableNames[i]}'");
        }
        builder.Append(')');
        var sql = builder.ToString();
        var result = new List<TableInfo>();
        using var connection = new MySqlConnection(this.connectionString);
        using var command = new MySqlCommand(sql, connection);
        connection.Open();
        var reader = command.ExecuteReader(CommandBehavior.SequentialAccess | CommandBehavior.CloseConnection);
        while (reader.Read())
        {
            result.Add(new TableInfo
            {
                TableName = this.ToValue<string>(reader[0]),
                Description = this.ToValue<string>(reader[1])
            });
        }
        reader.Close();
        connection.Close();
        return result;
    }
    public TableInfo GetTableInfo(string database, string tableName)
    {
        var sql = @"SELECT TABLE_NAME,TABLE_COMMENT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='{0}' AND TABLE_NAME='{1}'";
        sql = string.Format(sql, database, tableName);
        TableInfo result = null;
        using var connection = new MySqlConnection(this.connectionString);
        using var command = new MySqlCommand(sql, connection);
        connection.Open();
        var reader = command.ExecuteReader(CommandBehavior.SequentialAccess | CommandBehavior.CloseConnection);
        if (reader.Read())
        {
            result = new TableInfo
            {
                TableName = this.ToValue<string>(reader[0]),
                Description = this.ToValue<string>(reader[1])
            };
        }
        reader.Close();
        connection.Close();
        return result;
    }
    public List<ColumnInfo> GetColumnList(string database, string tableName)
    {
        var sql = @"SELECT a.COLUMN_NAME,
		a.DATA_TYPE,
		a.COLUMN_TYPE,
		a.CHARACTER_MAXIMUM_LENGTH,
		a.NUMERIC_SCALE,
		a.NUMERIC_PRECISION,
		a.COLUMN_COMMENT,
		a.COLUMN_DEFAULT,
		a.COLUMN_KEY,
		a.EXTRA,
		a.IS_NULLABLE,
        	a.ORDINAL_POSITION
    	FROM INFORMATION_SCHEMA.COLUMNS a
    	WHERE a.TABLE_SCHEMA='{0}' AND a.TABLE_NAME='{1}'
        ORDER BY a.ORDINAL_POSITION";

        sql = String.Format(sql, database, tableName);
        var result = new List<ColumnInfo>();
        using var connection = new MySqlConnection(this.connectionString);
        using var command = new MySqlCommand(sql, connection);
        connection.Open();
        using var reader = command.ExecuteReader(CommandBehavior.SequentialAccess | CommandBehavior.CloseConnection);
        while (reader.Read())
        {
            result.Add(new ColumnInfo
            {
                ColumnName = this.ToValue<string>(reader[0]),
                DataType = this.ToValue<string>(reader[1]),
                ColumnType = this.ToValue<string>(reader[2]),
                Length = (int)this.ToValue<ulong>(reader[3]),
                Scale = this.ToValue<int>(reader[4]),
                Precision = this.ToValue<int>(reader[5]),
                Description = this.ToValue<string>(reader[6]),
                DefaultValue = this.ToValue<string>(reader[7]),
                IsPrimaryKey = this.ToValue<string>(reader[8]) == "PRI",
                IsIdentity = this.ToValue<string>(reader[9]).Contains("auto_increment"),
                IsNullable = this.ToValue<string>(reader[10]) == "YES",
                Position = this.ToValue<int>(reader[11])
            });
        }
        reader.Close();
        connection.Close();
        return result;
    }
    public ClassMemberInfo MapMember(ColumnInfo columnInfo)
    {
        var result = new ClassMemberInfo { DbColumnType = columnInfo.ColumnType, Length = columnInfo.Length };
        bool isUnsigned = columnInfo.ColumnType.Contains("unsigned");
        switch (columnInfo.DataType)
        {
            case "bit":
            case "bool":
                result.NativeDbType = "MySqlDbType.Bool";
                result.MemberType = "bool";
                break;

            case "tinyint":
                if (columnInfo.ColumnType == "tinyint(1)")
                {
                    result.NativeDbType = "MySqlDbType.Bool";
                    result.MemberType = "bool";
                }
                else
                {
                    result.NativeDbType = isUnsigned ? "MySqlDbType.UByte" : "MySqlDbType.Byte";
                    result.MemberType = isUnsigned ? "byte" : "sbyte";
                }
                break;
            case "smallint":
                result.DbColumnType = columnInfo.DataType;
                result.NativeDbType = isUnsigned ? "MySqlDbType.UInt16" : "MySqlDbType.Int16";
                result.MemberType = isUnsigned ? "ushort" : "short";
                break;
            case "mediumint":
                result.DbColumnType = columnInfo.DataType;
                result.NativeDbType = isUnsigned ? "MySqlDbType.UInt24" : "MySqlDbType.Int24";
                result.MemberType = isUnsigned ? "uint" : "int";
                break;
            case "int":
                result.DbColumnType = columnInfo.DataType;
                result.NativeDbType = isUnsigned ? "MySqlDbType.UInt32" : "MySqlDbType.Int32";
                result.MemberType = isUnsigned ? "uint" : "int";
                break;
            case "bigint":
                result.DbColumnType = columnInfo.DataType;
                result.NativeDbType = isUnsigned ? "MySqlDbType.UInt64" : "MySqlDbType.Int64";
                result.MemberType = isUnsigned ? "ulong" : "long";
                break;
            case "float":
                result.NativeDbType = "MySqlDbType.Float";
                result.MemberType = "float";
                break;
            case "real":
            case "double":
                result.NativeDbType = "MySqlDbType.Double";
                result.MemberType = "double";
                break;
            case "numeric":
            case "decimal":
                result.NativeDbType = "MySqlDbType.Decimal";
                result.MemberType = "decimal";
                break;

            case "year":
                result.NativeDbType = "MySqlDbType.Year";
                result.MemberType = "int";
                break;
            case "time":
                result.NativeDbType = "MySqlDbType.Time";
                result.MemberType = "TimeSpan";
                break;
            case "date":
                result.NativeDbType = "MySqlDbType.Date";
                result.MemberType = "DateOnly";
                break;
            case "timestamp":
                result.NativeDbType = "MySqlDbType.Timestamp";
                result.MemberType = "DateTime";
                break;
            case "smalldatetime":
            case "datetime":
                result.NativeDbType = "MySqlDbType.DateTime";
                result.MemberType = "DateTime";
                break;

            case "tinyblob":
                result.NativeDbType = "MySqlDbType.TinyBlob";
                result.MemberType = "byte[]";
                break;
            case "blob":
                result.NativeDbType = "MySqlDbType.Blob";
                result.MemberType = "byte[]";
                break;
            case "mediumblob":
                result.NativeDbType = "MySqlDbType.MediumBlob";
                result.MemberType = "byte[]";
                break;
            case "longblob":
                result.NativeDbType = "MySqlDbType.LongBlob";
                result.MemberType = "byte[]";
                break;
            case "binary":
                result.NativeDbType = "MySqlDbType.Binary";
                result.MemberType = "byte[]";
                break;
            case "varbinary":
                result.NativeDbType = "MySqlDbType.VarBinary";
                result.MemberType = "byte[]";
                break;

            case "tinytext":
                result.NativeDbType = "MySqlDbType.TinyText";
                result.MemberType = "string";
                break;
            case "text":
                result.NativeDbType = "MySqlDbType.Text";
                result.MemberType = "string";
                break;
            case "mediumtext":
                result.NativeDbType = "MySqlDbType.MediumText";
                result.MemberType = "string";
                break;
            case "longtext":
                result.NativeDbType = "MySqlDbType.LongText";
                result.MemberType = "string";
                break;
            case "char":
                result.NativeDbType = columnInfo.Length == 36 ? "MySqlDbType.Guid" : "MySqlDbType.String";
                result.MemberType = columnInfo.Length == 36 ? "Guid" : "string";
                result.Length = (int)columnInfo.Length;
                break;
            case "varchar":
                result.NativeDbType = "MySqlDbType.VarChar";
                result.MemberType = "string";
                result.Length = (int)columnInfo.Length;
                break;

            case "set":
                result.NativeDbType = "MySqlDbType.Set";
                result.MemberType = "int";
                break;
            case "enum":
                result.NativeDbType = "MySqlDbType.Enum";
                result.MemberType = "int";
                break;

            case "point":
            case "linestring":
            case "polygon":
            case "geometry":
            case "multipoint":
            case "multilinestring":
            case "multipolygon":
            case "geometrycollection":
                result.NativeDbType = "MySqlDbType.Geometry";
                result.MemberType = "object";
                break;
            default:
                result.NativeDbType = "MySqlDbType.String";
                result.MemberType = "string";
                break;
        }
        return result;
    }
}
#>