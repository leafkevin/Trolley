<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.Linq"#>
<#@ assembly name="System.Data.Common"#>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Xml"#>
<#@ assembly name="System.Xml.Linq"#>
<#@ import namespace="System" #>
<#@ import namespace="System.CodeDom"#>
<#@ import namespace="System.CodeDom.Compiler"#>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data"#>
<#@ import namespace="System.Data.Linq"#>
<#@ import namespace="System.Data.Linq.Mapping"#>
<#@ import namespace="System.IO"#>
<#@ import namespace="System.Linq"#>
<#@ import namespace="System.Reflection"#>
<#@ import namespace="System.Text"#>
<#@ import namespace="System.Xml.Linq"#>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<#@ output encoding="utf-8" #>
using Thea.Domain.Models;
using Thea.Orm;

namespace Thea;

class ModelConfiguration : IModelConfiguration
{
    public void OnModelCreating(ModelBuilder builder)
    {
<#
    var connectionString = "Server=localhost;Database=fengling;Uid=root;password=123456;charset=utf8mb4;";
    var dbProvider = new MySqlProvider(connectionString);

    var databaseName = "fengling";
    var tableNames = new[]{"sys_user","sys_company","sys_order","sys_order_detail"};
    var removePrefixes = new []{"sys_","mos_"};
    var separator = '_';

    var tableList = dbProvider.GetTableList(databaseName, tableNames);
    foreach(var tableInfo in tableList)
    {
        var tableName = tableInfo.TableName;
        var className = dbProvider.ToClassName(tableName, removePrefixes, separator);
        var columnList = dbProvider.GetColumnList(databaseName, tableName); 
#>
        builder.Entity<<#=className#>>(f =>
        {
            f.ToTable("<#=tableName#>").Key(t =><#
        var keyColumnInfos = columnList.FindAll(f => f.IsPrimaryKey);
        if(keyColumnInfos.Count > 1)
        {
            #> new {<#
            for(int i = 0; i< keyColumnInfos.Count; i++)
            {
                var propertyName = keyColumnInfos[i].ColumnName;
                if(i > 0)
                {
                    #>,<#
                }
                #> t.<#=propertyName#><#      
            }#> }<#  
        }
        else
        {
            #> t.<#=keyColumnInfos[0].ColumnName#><#  
        }#>);
<#
        var strDataTypes = new string[]{ "char", "nchar", "varchar", "nvarchar"};
        foreach(ColumnInfo columnInfo in columnList)
        {
            var propertyName = columnInfo.ColumnName;
            var classMemberInfo = dbProvider.MapMember(columnInfo);
            var nativeDbType = classMemberInfo.NativeDbType;
            var columnType = classMemberInfo.DbColumnType;
            var position = columnInfo.Position;
            var length = classMemberInfo.Length;
#>
            f.Member(t => t.<#=propertyName#>).Field(nameof(<#=className#>.<#=propertyName#>)).DbColumnType("<#=columnType#>").NativeDbType(<#=nativeDbType#>).Position(<#=position#>)<#
            if(classMemberInfo.MemberType == "string" && strDataTypes.Contains(columnInfo.DataType) && length > 0)
            {
                #>.Length(<#=length#>)<#
            }
            if(columnInfo.IsIdentity)
            {
                #>.AutoIncrement()<#
            }
            if(!columnInfo.IsNullable)
            {
                #>.Required()<#
            }#>;
<#      }#>
        });
<#  }#>
    }
}
<#@ include file="$(ProjectDir)\DbEntitries.ttinclude" once="true"#>
<#@ include file="MySqlProvider.ttinclude" once="true"#>