<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#+
class SqlServerProvider : DbHelper
{
    private readonly string connectionString;
    public SqlServerProvider(string connectionString)
        => this.connectionString = connectionString;
    public List<TableInfo> GetTableList(string tableNamefilter)
    {
        var sql = "SELECT A.NAME,B.VALUE FROM SYS.SYSOBJECTS A LEFT JOIN SYS.EXTENDED_PROPERTIES B ON A.ID=B.MAJOR_ID AND B.MINOR_ID=0 AND B.NAME='MS_Description' WHERE A.xtype='U' AND A.NAME LIKE '%{0}%'";
        sql = string.Format(sql, tableNamefilter);
        var result = new List<TableInfo>();
        using var connection = new SqlConnection(this.connectionString);
        using var command = new SqlCommand(sql, connection);
        connection.Open();
        var reader = command.ExecuteReader(CommandBehavior.SequentialAccess | CommandBehavior.CloseConnection);
        while (reader.Read())
        {
            result.Add(new TableInfo
            {
                TableName = this.ToValue<string>(reader[0]),
                Description = this.ToValue<string>(reader[1])
            });
        }
        reader.Close();
        connection.Close();
        return result;
    }    
    public TableInfo GetTableInfo(string tableName)
    {
        var sql = "SELECT a.NAME,b.VALUE FROM SYS.SYSOBJECTS a LEFT JOIN SYS.EXTENDED_PROPERTIES b ON A.ID=b.MAJOR_ID AND b.MINOR_ID=0 AND b.NAME='MS_Description' WHERE a.xtype='U' AND a.NAME='{0}'";
        sql = string.Format(sql, tableName);
        TableInfo result = null;
        using var connection = new SqlConnection(this.connectionString);
        using var command = new SqlCommand(sql, connection);
        connection.Open();
        var reader = command.ExecuteReader(CommandBehavior.SequentialAccess | CommandBehavior.CloseConnection);
        if (reader.Read())
        {
            result = new TableInfo
            {
                TableName = this.ToValue<string>(reader[0]),
                Description = this.ToValue<string>(reader[1])
            };
        }
        reader.Close();
        connection.Close();
        return result;
    }
    public List<ColumnInfo> GetColumnList(string tableName)
    {
        var sql = @"SELECT a.name,LOWER(c.name),c.name + CASE WHEN c.name IN ('char', 'varchar', 'nchar', 'nvarchar', 'binary', 'varbinary') THEN '(' + 
		CASE WHEN a.length = -1 THEN 'MAX' WHEN c.name IN ('nchar', 'nvarchar') THEN CAST(a.length / 2 as varchar) ELSE CAST(a.length as varchar) END + ')'
		WHEN c.name in ('numeric', 'decimal') THEN '(' + CAST(a.xprec as varchar) + ',' + CAST(a.xscale as varchar) + ')' ELSE '' END,
		    CASE WHEN c.name in ('text', 'ntext', 'image') THEN -1 WHEN c.name IN ('nchar','nvarchar') THEN a.length/2 ELSE a.length END,
		    a.xprec,a.xscale,d.value,f.text,ISNULL(kc.keyno,0),COLUMNPROPERTY(a.id,a.name,'IsIdentity'),a.isnullable,a.colid
		    FROM SYS.syscolumns a 
        INNER JOIN SYS.sysobjects b ON a.id=b.id
        INNER JOIN SYS.systypes c ON a.xusertype = c.xusertype 
        LEFT JOIN SYS.extended_properties d ON d.major_id=a.ID AND d.minor_id = a.colid AND d.name='MS_Description'
        LEFT JOIN sysobjects ko ON ko.xtype = 'PK' AND ko.parent_obj=OBJECT_ID('{0}')
        LEFT JOIN sysindexes ki ON ki.name=ko.name AND b.id=ki.id
        LEFT JOIN sysindexkeys  kc On kc.indid=ki.indid AND a.colid=kc.colid AND kc.id=OBJECT_ID('{0}')
        LEFT JOIN SYS.syscomments f ON a.cdefault=f.id
        WHERE b.xtype='U' AND b.name='{0}' ORDER BY a.colid";

        sql = string.Format(sql, tableName);
        var result = new List<ColumnInfo>();
        using var connection = new SqlConnection(this.connectionString);
        using var command = new SqlCommand(sql, connection);
        connection.Open();
        var reader = command.ExecuteReader(CommandBehavior.SequentialAccess | CommandBehavior.CloseConnection);
        while (reader.Read())
        {
            result.Add(new ColumnInfo
            {
                ColumnName = this.ToValue<string>(reader[0]),
                DataType = this.ToValue<string>(reader[1]),
                ColumnType = this.ToValue<string>(reader[2]),
                Length = this.ToValue<int>(reader[3]),
                Scale = this.ToValue<int>(reader[4]),
                Precision = this.ToValue<int>(reader[5]),
                Description = this.ToValue<string>(reader[6]),
                DefaultValue = this.ToValue<string>(reader[7]),
                IsPrimaryKey = this.ToValue<int>(reader[8]) > 0,
                IsIdentity = this.ToValue<int>(reader[9]) == 1,
                IsNullable = this.ToValue<int>(reader[10]) == 1,
                Position = this.ToValue<int>(reader[11])
            });
        }
        reader.Close();
        connection.Close();
        return result;
    }
    public ClassMemberInfo MapMember(ColumnInfo columnInfo)
    {
    	var result = new ClassMemberInfo { DbColumnType = columnInfo.ColumnType, Length = columnInfo.Length };
        switch (columnInfo.DataType)
        {
            case "bit":
                result.NativeDbType = "SqlDbType.Bit";
                result.MemberType = "bool";
                break;
            case "char":
                result.NativeDbType = "SqlDbType.Char";
                result.MemberType = "string";
                break;
            case "varchar":
                result.NativeDbType = "SqlDbType.VarChar";
                result.MemberType = "string";
                break;
            case "text":
                result.NativeDbType = "SqlDbType.Text";
                result.MemberType = "string";
                break;
            case "nchar":
                result.NativeDbType = "SqlDbType.NChar";
                result.MemberType = "string";
                break;
            case "nvarchar":
                result.NativeDbType = "SqlDbType.NVarChar";
                result.MemberType = "string";
                break;
            case "ntext":
                result.NativeDbType = "SqlDbType.NText";
                result.MemberType = "string";
                break;
            case "tinyint":
                result.NativeDbType = "SqlDbType.TinyInt";
                result.MemberType = "byte";
                break;
             case "smallint":
                result.NativeDbType = "SqlDbType.SmallInt";
                result.MemberType = "short";
                break;
            case "int":
                result.NativeDbType = "SqlDbType.Int";
                result.MemberType = "int";
                break;
            case "bigint":
                result.NativeDbType = "SqlDbType.NText";
                result.MemberType = "long";
                break;
            case "smalldatetime":
                result.NativeDbType = "SqlDbType.SmallDateTime";
                result.MemberType = "DateTime";
                break;
            case "datetime":
                result.NativeDbType = "SqlDbType.DateTime";
                result.MemberType = "DateTime";
                break;
            case "datetime2":
                result.NativeDbType = "SqlDbType.DateTime2";
                result.MemberType = "DateTime";
                break;
            case "date":
                result.NativeDbType = "SqlDbType.Date";
                result.MemberType = "DateOnly";
                break;
            case "time":
                result.NativeDbType = "SqlDbType.Time";
                result.MemberType = "TimeSpan";
                break;
            case "datetimeoffset":
                result.NativeDbType = "SqlDbType.DateTimeOffset";
                result.MemberType = "DateTimeOffset";
                break;
            case "real":
                result.NativeDbType = "SqlDbType.Real";
                result.MemberType = "float";
                break;
            case "float":
                result.NativeDbType = "SqlDbType.Float";
                result.MemberType = "double";
                break;            
            case "numeric":            
                result.NativeDbType = "SqlDbType.Decimal";
                result.MemberType = "decimal";
                break;
            case "smallmoney":
                result.NativeDbType = "SqlDbType.SmallMoney";
                result.MemberType = "decimal";
                break;
            case "decimal":
                result.NativeDbType = "SqlDbType.Decimal";
                result.MemberType = "decimal";
                break;
            case "money":
                result.NativeDbType = "SqlDbType.Money";
                result.MemberType = "decimal";
                break;
            case "image":
                result.NativeDbType = "SqlDbType.Image";
                result.MemberType = "byte[]";
                break;
            case "binary":
                result.NativeDbType = "SqlDbType.Binary";
                result.MemberType = "byte[]";
                break;
            case "varbinary":
                result.NativeDbType = "SqlDbType.VarBinary";
                result.MemberType = "byte[]";
                break;
            case "timestamp":
                result.NativeDbType = "SqlDbType.Money";
                result.MemberType = "byte[]";
                break;
            case "uniqueidentifier":
                result.NativeDbType = "SqlDbType.UniqueIdentifier";
                result.MemberType = "Guid";
                break;
            default:
                result.NativeDbType = "SqlDbType.Variant";
                result.MemberType = "object";
                break;
        }
        return result;
    }
    public string MapNativeDbType(ColumnInfo columnInfo)
    {
        switch (columnInfo.DataType)
        {
            case "bit": return "SqlDbType.Bit";
            case "tinyint": return "SqlDbType.TinyInt";
            case "smallint": return "SqlDbType.SmallInt";
            case "int": return "SqlDbType.Int";
            case "bigint": return "SqlDbType.BigInt";
            case "numeric":
            case "decimal": return "SqlDbType.Decimal";
            case "smallmoney": return "SqlDbType.SmallMoney";
            case "money": return "SqlDbType.Money";
            case "float": return "SqlDbType.Float";
            case "real": return "SqlDbType.Real";
            case "date": return "SqlDbType.Date";
            case "datetime": return "SqlDbType.DateTime";
            case "datetime2": return "SqlDbType.DateTime2";
            case "datetimeoffset": return "SqlDbType.DateTimeOffset";
            case "smalldatetime": return "SqlDbType.SmallDateTime";
            case "time": return "SqlDbType.Time";
            case "char": return "SqlDbType.Char";
            case "varchar": return "SqlDbType.VarChar";
            case "text": return "SqlDbType.Text";
            case "nchar": return "SqlDbType.NChar";
            case "nvarchar": return "SqlDbType.NVarChar";
            case "ntext": return "SqlDbType.NText";
            case "binary": return "SqlDbType.Binary";
            case "varbinary": return "SqlDbType.VarBinary";
            case "image": return "SqlDbType.Image";
            case "timestamp": return "SqlDbType.Timestamp";
            case "uniqueidentifier": return "SqlDbType.UniqueIdentifier";
            default: return "SqlDbType.Variant";
        }
    }
}
#>