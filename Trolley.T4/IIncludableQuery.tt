<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Linq.Expressions;

namespace Trolley;

public interface IIncludableQuery<T, TMember> : IQuery<T>
{
    IIncludableQuery<T, TNavigation> ThenInclude<TNavigation>(Expression<Func<TMember, TNavigation>> member);
    IIncludableQuery<T, TElment> ThenIncludeMany<TElment>(Expression<Func<TMember, IEnumerable<TElment>>> member, Expression<Func<TElment, bool>> filter = null);
}
<#
    var count = 15;
    var tables = "T1";
    for (int i = 2; i < count; i++)
    {
        tables += $", T{i}";
#>
public interface IIncludableQuery<<#=tables#>, TMember> : IQuery<<#=tables#>>
{
    IIncludableQuery<<#=tables#>, TNavigation> ThenInclude<TNavigation>(Expression<Func<TMember, TNavigation>> member);
    IIncludableQuery<<#=tables#>, TElment> ThenIncludeMany<TElment>(Expression<Func<TMember, IEnumerable<TElment>>> member, Expression<Func<TElment, bool>> filter = null);
}
<#  }
    tables += $", T{count}";
#>
public interface IIncludableQuery<<#=tables#>, TMember> : IQuery<<#=tables#>>
{
}