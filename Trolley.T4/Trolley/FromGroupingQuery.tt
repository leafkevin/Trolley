<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<#@ output extension=".cs" #>
using System;
using System.Linq.Expressions;

namespace Trolley;

class FromGroupingQuery<T, TGrouping> : IFromGroupingQuery<T, TGrouping>
{
    private readonly QueryVisitor visitor;

    public FromGroupingQuery(QueryVisitor visitor) => this.visitor = visitor;

    public IFromGroupingQuery<T, TGrouping> Having(Expression<Func<IGroupingAggregate<TGrouping>, T, bool>> predicate)
    {
        if (predicate == null)
            throw new ArgumentNullException(nameof(predicate));

        this.visitor.Having(predicate);
        return this;
    }
    public IFromGroupingQuery<T, TGrouping> Having(bool condition, Expression<Func<IGroupingAggregate<TGrouping>, T, bool>> predicate)
    {
        if (predicate == null)
            throw new ArgumentNullException(nameof(predicate));

        if (condition) this.visitor.Having(predicate);
        return this;
    }
    public IFromGroupingQuery<T, TGrouping> OrderBy<TFields>(Expression<Func<IGroupingAggregate<TGrouping>, T, TFields>> fieldsExpr)
    {
        if (fieldsExpr == null)
            throw new ArgumentNullException(nameof(fieldsExpr));

        this.visitor.OrderBy("ASC", fieldsExpr);
        return this;
    }
    public IFromGroupingQuery<T, TGrouping> OrderByDescending<TFields>(Expression<Func<IGroupingAggregate<TGrouping>, T, TFields>> fieldsExpr)
    {
        if (fieldsExpr == null)
            throw new ArgumentNullException(nameof(fieldsExpr));

        this.visitor.OrderBy("DESC", fieldsExpr);
        return this;
    }
    public IFromGroupingQuery<T, TGrouping> Distinct()
    {
        this.visitor.Distinct();
        return this;
    }
    public IFromQuery<TGrouping> Select()
    {
        this.visitor.SelectGrouping();
        return new FromQuery<TGrouping>(this.visitor);
    }
    public IQueryAnonymousObject Select(string fields = "*")
    {
        if (string.IsNullOrEmpty(fields))
            throw new ArgumentNullException(nameof(fields));

        this.visitor.Select(fields);
        return new QueryAnonymousObject(this.visitor);
    }
    public IFromQuery<TTarget> Select<TTarget>(Expression<Func<IGroupingAggregate<TGrouping>, T, TTarget>> fieldsExpr)
    {
        this.visitor.Select(null, fieldsExpr);
        return new FromQuery<TTarget>(this.visitor);
    }
}
<#
    var count = 15;
    var tables = "T1";
    for (int i = 2; i < count; i++)
    {
        tables += $", T{i}";
#>
class FromGroupingQuery<<#=tables#>, TGrouping> : IFromGroupingQuery<<#=tables#>, TGrouping>
{
    private readonly QueryVisitor visitor;

    public FromGroupingQuery(QueryVisitor visitor) => this.visitor = visitor;

    public IFromGroupingQuery<<#=tables#>, TGrouping> Having(Expression<Func<IGroupingAggregate<TGrouping>, <#=tables#>, bool>> predicate)
    {
        if (predicate == null)
            throw new ArgumentNullException(nameof(predicate));

        this.visitor.Having(predicate);
        return this;
    }
    public IFromGroupingQuery<<#=tables#>, TGrouping> Having(bool condition, Expression<Func<IGroupingAggregate<TGrouping>, <#=tables#>, bool>> predicate)
    {
        if (predicate == null)
            throw new ArgumentNullException(nameof(predicate));

        if (condition) 
            this.visitor.Having(predicate);
        return this;
    }
    public IFromGroupingQuery<<#=tables#>, TGrouping> OrderBy<TFields>(Expression<Func<IGroupingAggregate<TGrouping>, <#=tables#>, TFields>> fieldsExpr)
    {
        if (fieldsExpr == null)
            throw new ArgumentNullException(nameof(fieldsExpr));

        this.visitor.OrderBy("ASC", fieldsExpr);
        return this;
    }
    public IFromGroupingQuery<<#=tables#>, TGrouping> OrderByDescending<TFields>(Expression<Func<IGroupingAggregate<TGrouping>, <#=tables#>, TFields>> fieldsExpr)
    {
        if (fieldsExpr == null)
            throw new ArgumentNullException(nameof(fieldsExpr));

        this.visitor.OrderBy("DESC", fieldsExpr);
        return this;
    }
    public IFromQuery<TGrouping> Select()
    {
        this.visitor.SelectGrouping();
        return new FromQuery<TGrouping>(this.visitor);
    }
    public IQueryAnonymousObject Select(string fields = "*")
    {
        if (string.IsNullOrEmpty(fields))
            throw new ArgumentNullException(nameof(fields));

        this.visitor.Select(fields);
        return new QueryAnonymousObject(this.visitor);
    }
    public IFromQuery<TTarget> Select<TTarget>(Expression<Func<IGroupingAggregate<TGrouping>, <#=tables#>, TTarget>> fieldsExpr)
    {
        if (fieldsExpr == null)
            throw new ArgumentNullException(nameof(fieldsExpr));

        this.visitor.Select(null, fieldsExpr);
        return new FromQuery<TTarget>(this.visitor);
    }
}
<#  }
    tables += $", T{count}";
#>
class FromGroupingQuery<<#=tables#>, TGrouping> : IFromGroupingQuery<<#=tables#>, TGrouping>
{
    private readonly QueryVisitor visitor;

    public FromGroupingQuery(QueryVisitor visitor) => this.visitor = visitor;

    public IFromQuery<TGrouping> Select()
    {
        this.visitor.SelectGrouping();
        return new FromQuery<TGrouping>(this.visitor);
    }
    public IQueryAnonymousObject Select(string fields = "*")
    {
        if (string.IsNullOrEmpty(fields))
            throw new ArgumentNullException(nameof(fields));

        this.visitor.Select(fields);
        return new QueryAnonymousObject(this.visitor);
    }
    public IFromQuery<TTarget> Select<TTarget>(Expression<Func<IGroupingAggregate<TGrouping>, <#=tables#>, TTarget>> fieldsExpr)
    {
        if (fieldsExpr == null)
            throw new ArgumentNullException(nameof(fieldsExpr));

        this.visitor.Select(null, fieldsExpr);
        return new FromQuery<TTarget>(this.visitor);
    }
}