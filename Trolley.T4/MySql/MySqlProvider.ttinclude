<#@ assembly name="$(ProjectDir)\Plugins\MySqlConnector.dll" #>
<#@ import namespace="MySqlConnector" #>
<#+  
class MySqlProvider : DbHelper
{
    private readonly string connectionString;
    public MySqlProvider(string connectionString)
        => this.connectionString = connectionString;
    public List<TableInfo> GetTableList(string database, string tableNamefilter)
    {
        var sql = @"SELECT TABLE_NAME,TABLE_COMMENT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='{0}' AND TABLE_NAME LIKE '%{1}%'";
        sql = string.Format(sql, database, tableNamefilter);
        var result = new List<TableInfo>();
        using var connection = new MySqlConnection(this.connectionString);
        using var command = new MySqlCommand(sql, connection);
        connection.Open();
        var reader = command.ExecuteReader(CommandBehavior.SequentialAccess | CommandBehavior.CloseConnection);
        while (reader.Read())
        {
            result.Add(new TableInfo
            {
                TableName = this.ToValue<string>(reader[0]),
                Description = this.ToValue<string>(reader[1])
            });
        }
        reader.Close();
        connection.Close();
        return result;
    }
    public TableInfo GetTableInfo(string database, string tableName)
    {
        var sql = @"SELECT TABLE_NAME,TABLE_COMMENT FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='{0}' AND TABLE_NAME='{1}'";
        sql = string.Format(sql, database, tableName);
        TableInfo result = null;
        using var connection = new MySqlConnection(this.connectionString);
        using var command = new MySqlCommand(sql, connection);
        connection.Open();
        var reader = command.ExecuteReader(CommandBehavior.SequentialAccess | CommandBehavior.CloseConnection);
        if (reader.Read())
        {
            result = new TableInfo
            {
                TableName = this.ToValue<string>(reader[0]),
                Description = this.ToValue<string>(reader[1])
            };
        }
        reader.Close();
        connection.Close();
        return result;
    }
    public List<ColumnInfo> GetColumnList(string database, string tableName)
    {
        var sql = @"SELECT A.COLUMN_NAME,
				           A.DATA_TYPE,
					       A.COLUMN_TYPE,
				           A.CHARACTER_MAXIMUM_LENGTH,
				           A.NUMERIC_SCALE,
				           A.NUMERIC_PRECISION,
				           A.COLUMN_COMMENT,
				           A.COLUMN_DEFAULT,
				           A.COLUMN_KEY,
				           A.EXTRA,
				           A.IS_NULLABLE
				       FROM INFORMATION_SCHEMA.COLUMNS A
				       WHERE A.TABLE_SCHEMA='{0}' AND A.TABLE_NAME='{1}'";

        sql = String.Format(sql, database, tableName);
        var result = new List<ColumnInfo>();
        using var connection = new MySqlConnection(this.connectionString);
        using var command = new MySqlCommand(sql, connection);
        connection.Open();
        using var reader = command.ExecuteReader(CommandBehavior.SequentialAccess | CommandBehavior.CloseConnection);
        while (reader.Read())
        {
            result.Add(new ColumnInfo
            {
                ColumnName = this.ToValue<string>(reader[0]),
                DataType = this.ToValue<string>(reader[1]),
                ColumnType = this.ToValue<string>(reader[2]),
                Length = this.ToValue<ulong>(reader[3]),
                Scale = this.ToValue<int>(reader[4]),
                Precision = this.ToValue<int>(reader[5]),
                Description = this.ToValue<string>(reader[6]),
                DefaultValue = this.ToValue<string>(reader[7]),
                IsPrimaryKey = this.ToValue<string>(reader[8]) == "PRI",
                IsNullable = this.ToValue<string>(reader[9]).Contains("auto_increment"),
                IsIdentity = this.ToValue<string>(reader[10]) == "YES"
            });
        }
        reader.Close();
        connection.Close();
        return result;
    }
    public string MapMemberType(ColumnInfo columnInfo)
    {
        bool isUnsigned = columnInfo.ColumnType.Contains("unsigned");
        switch (columnInfo.DataType)
        {
            case "bit":
            case "bool": return "bool";

            case "tinyint": return isUnsigned ? "byte" : "sbyte";
            case "smallint": return isUnsigned ? "ushort" : "short";
            case "mediumint": return isUnsigned ? "uint" : "int";
            case "int": return isUnsigned ? "uint" : "int";
            case "bigint": return isUnsigned ? "ulong" : "long"; 

            case "float": return "float";
            case "real":
            case "double": return "double";            

            case "numeric":
            case "smallmoney":
            case "money":
            case "decimal": return "decimal";

            case "year": return "int";
            case "time": return "TimeSpan";

            case "smalldatetime":
            case "date":
            case "datetime":
            case "timestamp": return "DateTime";
            
            case "tinyblob":
            case "blob":
            case "mediumblob":
            case "longblob":
            case "image":
            case "binary":
            case "varbinary": return "byte[]";

            case "tinytext":
            case "text":
            case "mediumtext":
            case "longtext": return "string";

            case "char": return columnInfo.Length == 36 ? "Guid" : "string";
            case "varchar": return "string";

            case "guid": return "Guid";

            case "set":
            case "enum": return "int";

            case "point": 
            case "linestring":
            case "polygon":
            case "geometry":
            case "multipoint":
            case "multilinestring":
            case "multipolygon":
            case "geometrycollection": return "object";

            default: return "string";
        }
        return "string";
    }
    public int MapNativeDbType(ColumnInfo columnInfo)
    {
        bool isUnsigned = columnInfo.ColumnType.Contains("unsigned");
        switch (columnInfo.DataType)
        {
            case "bit": return 16;

            case "bool": return -1;

            case "tinyint": return isUnsigned ? 501 : 1;
            case "smallint": return isUnsigned ? 502 : 2;
            case "mediumint": return isUnsigned ? 509 : 9;
            case "int": return isUnsigned ? 503 : 3;
            case "bigint": return isUnsigned ? 508 : 8;

            case "float": return 4;
            case "real":
            case "double": return 5;
           
            case "smallmoney":
            case "money":
            case "numeric":
            case "decimal": return 0;

            case "year": return 13;
            case "time": return 11;
            case "date": return 10;
            case "timestamp": return 7;
            case "datetime": return 12;

            case "tinyblob": return 249;
            case "blob": return 252;
            case "mediumblob": return 250;
            case "longblob": return 251;

            case "binary": return 600;
            case "varbinary": return 601;

            case "tinytext": return 749;
            case "text": return 752;
            case "mediumtext": return 750;
            case "longtext": return 751;

            case "char": return columnInfo.Length == 36 ? 800 : 254;
            case "varchar": return 253;

            case "set": return 248;
            case "enum": return 247;

            case "point":
            case "linestring":
            case "polygon":
            case "geometry":
            case "multipoint":
            case "multilinestring":
            case "multipolygon":
            case "geometrycollection": return 255;

            default: return 254;
        }
    }
}
#>