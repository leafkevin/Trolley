<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating"#>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;

namespace Trolley;

<#
    var count = 16;
    string tables = "T1";
    for (int i = 2; i < count; i++)
    {
        tables += $", T{i}";
#>
class Query<<#=tables#>> : IQuery<<#=tables#>>
{
    private int withIndex = 0;
    private int unionIndex = 0;
    protected readonly IOrmDbFactory dbFactory;
    protected readonly TheaConnection connection;
    protected readonly IDbTransaction transaction;
    protected readonly QueryVisitor visitor;

    public Query(QueryVisitor visitor)
    {
        this.visitor = visitor;
        this.dbFactory = visitor.dbFactory;
        this.connection = visitor.connection;
        this.transaction = visitor.transaction;        
    }

    #region Include
    public IIncludableQuery<<#=tables#>, TMember> Include<TMember>(Expression<Func<<#=tables#>, TMember>> memberSelector)
    {
        this.visitor.Include(memberSelector);
        return new IncludableQuery<<#=tables#>, TMember>(this.visitor);
    }
    public IIncludableQuery<<#=tables#>, TElment> IncludeMany<TElment>(Expression<Func<<#=tables#>, IEnumerable<TElment>>> memberSelector, Expression<Func<TElment, bool>> filter = null)
    {
        this.visitor.Include(memberSelector, filter);
        return new IncludableQuery<<#=tables#>, TElment>(this.visitor);
    }
    #endregion

    #region Join
    public IQuery<<#=tables#>, TOther> WithTable<TOther>(Func<IFromQuery, IQuery<TOther>> subQuery)
    {
        var fromQuery = new FromQuery(this.dbFactory, this.connection, this.transaction, $"p{this.withIndex++}w");
        var query = subQuery.Invoke(fromQuery);
        var sql = query.ToSql(out var dbDataParameters);
        this.visitor.WithTable(typeof(TOther), sql, dbDataParameters);
        return new Query<<#=tables#>, TOther>(this.visitor);
    }
    public IQuery<<#=tables#>> InnerJoin(Expression<Func<<#=tables#>, bool>> joinOn)
    {
        this.visitor.Join("INNER JOIN", null, joinOn);
        return this;
    }
    public IQuery<<#=tables#>> LeftJoin(Expression<Func<<#=tables#>, bool>> joinOn)
    {
        this.visitor.Join("LEFT JOIN", null, joinOn);
        return this;
    }
    public IQuery<<#=tables#>> RightJoin(Expression<Func<<#=tables#>, bool>> joinOn)
    {
        this.visitor.Join("RIGHT JOIN", null, joinOn);
        return this;
    }
    public IQuery<<#=tables#>, TOther> InnerJoin<TOther>(Expression<Func<<#=tables#>, TOther, bool>> joinOn)
    {
        this.visitor.Join("INNER JOIN", typeof(TOther), joinOn);
        return new Query<<#=tables#>, TOther>(this.visitor);
    }
    public IQuery<<#=tables#>, TOther> LeftJoin<TOther>(Expression<Func<<#=tables#>, TOther, bool>> joinOn)
    {
        this.visitor.Join("LEFT JOIN", typeof(TOther), joinOn);
        return new Query<<#=tables#>, TOther>(this.visitor);
    }
    public IQuery<<#=tables#>, TOther> RightJoin<TOther>(Expression<Func<<#=tables#>, TOther, bool>> joinOn)
    {
        this.visitor.Join("RIGHT JOIN", typeof(TOther), joinOn);
        return new Query<<#=tables#>, TOther>(this.visitor);
    }
    #endregion

    #region Union
    public IQuery<<#=tables#>> Union<TOther>(Func<IFromQuery, IQuery<TOther>> subQuery)
    {
        var dbParameters = new List<IDbDataParameter>();
        var sql = this.ToSql(out var parameters);
        if (parameters != null && parameters.Count > 0)
            dbParameters.AddRange(parameters);

        var fromQuery = new FromQuery(this.dbFactory, this.connection, this.transaction, $"p{this.unionIndex++}u");
        var query = subQuery.Invoke(fromQuery);
        sql += " UNION " + query.ToSql(out parameters);
        if (parameters != null && parameters.Count > 0)
            dbParameters.AddRange(parameters);

        this.visitor.Union(typeof(T1), sql, dbParameters);
        return this;
    }
    public IQuery<<#=tables#>> UnionAll<TOther>(Func<IFromQuery, IQuery<TOther>> subQuery)
    {
        var dbParameters = new List<IDbDataParameter>();
        var sql = this.ToSql(out var parameters);
        if (parameters != null && parameters.Count > 0)
            dbParameters.AddRange(parameters);

        var fromQuery = new FromQuery(this.dbFactory, this.connection, this.transaction, $"p{this.unionIndex++}u");
        var query = subQuery.Invoke(fromQuery);
        sql += " UNION ALL " + query.ToSql(out parameters);
        if (parameters != null && parameters.Count > 0)
            dbParameters.AddRange(parameters);

        this.visitor.Union(typeof(T1), sql, dbParameters);
        return this;
    }
    #endregion

    #region Where
    public IQuery<<#=tables#>> Where(Expression<Func<<#=tables#>, bool>> predicate)
    {
        this.visitor.Where(predicate);
        return this;
    }
    public IQuery<<#=tables#>> Where(Expression<Func<IWhereSql, <#=tables#>, bool>> predicate)
    {
        this.visitor.Where(predicate);
        return this;
    }
    public IQuery<<#=tables#>> And(bool condition, Expression<Func<<#=tables#>, bool>> predicate)
    {
        if (condition) 
            this.visitor.And(predicate);
        return this;
    }
    public IQuery<<#=tables#>> And(bool condition, Expression<Func<IWhereSql, <#=tables#>, bool>> predicate)
    {
        if (condition) 
            this.visitor.And(predicate);
        return this;
    }
    #endregion

    #region GroupBy/OrderBy
    public IGroupingQuery<<#=tables#>, TGrouping> GroupBy<TGrouping>(Expression<Func<<#=tables#>, TGrouping>> groupingExpr)
    {
        this.visitor.GroupBy(groupingExpr);
        return new GroupingQuery<<#=tables#>, TGrouping>(this.visitor);
    }
    public IQuery<<#=tables#>> OrderBy<TFields>(Expression<Func<<#=tables#>, TFields>> fieldsExpr)
    {
        this.visitor.OrderBy("ASC", fieldsExpr);
        return this;
    }
    public IQuery<<#=tables#>> OrderByDescending<TFields>(Expression<Func<<#=tables#>, TFields>> fieldsExpr)
    {
        this.visitor.OrderBy("DESC", fieldsExpr);
        return this;
    }
    #endregion

    public IQuery<<#=tables#>> Distinct()
    {
        this.visitor.Distinct();
        return this;
    }
    public IQuery<<#=tables#>> Skip(int offset)
    {
        this.visitor.Skip(offset);
        return this;
    }
    public IQuery<<#=tables#>> Take(int limit)
    {
        this.visitor.Take(limit);
        return this;
    }
    public IQuery<<#=tables#>> ToChunk(int size)
    {
        throw new NotImplementedException();
    }

    public IQuery<TTarget> Select<TTarget>(Expression<Func<<#=tables#>, TTarget>> fieldsExpr)
    {
        this.visitor.Select(null, fieldsExpr);
        return new Query<TTarget>(this.visitor);
    }
    public IQuery<TTarget> SelectAggregate<TTarget>(Expression<Func<IAggregateSelect, <#=tables#>, TTarget>> fieldsExpr)
    {
        this.visitor.Select(null, fieldsExpr);
        return new Query<TTarget>(this.visitor);
    }

    public int Count() => this.QueryFirstValue<int>("COUNT(1)");
    public async Task<int> CountAsync(CancellationToken cancellationToken = default)
        => await this.QueryFirstValueAsync<int>("COUNT(*)", null, cancellationToken);
    public long LongCount() => this.QueryFirstValue<long>("COUNT(1)");
    public async Task<long> LongCountAsync(CancellationToken cancellationToken = default)
        => await this.QueryFirstValueAsync<long>("COUNT(1)", null, cancellationToken);
    public int Count<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr)
        => this.QueryFirstValue<int>("COUNT({0})", fieldExpr);
    public async Task<int> CountAsync<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr, CancellationToken cancellationToken = default)
        => await this.QueryFirstValueAsync<int>("COUNT({0})", fieldExpr, cancellationToken);
    public int CountDistinct<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr)
        => this.QueryFirstValue<int>("COUNT(DISTINCT {0})", fieldExpr);
    public async Task<int> CountDistinctAsync<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr, CancellationToken cancellationToken = default)
        => await this.QueryFirstValueAsync<int>("COUNT(DISTINCT {0})", fieldExpr, cancellationToken);
    public long LongCount<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr)
        => this.QueryFirstValue<long>("COUNT({0})", fieldExpr);
    public async Task<long> LongCountAsync<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr, CancellationToken cancellationToken = default)
        => await this.QueryFirstValueAsync<long>("COUNT({0})", fieldExpr, cancellationToken);
    public long LongCountDistinct<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr)
        => this.QueryFirstValue<long>("COUNT(DISTINCT {0})", fieldExpr);
    public async Task<long> LongCountDistinctAsync<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr, CancellationToken cancellationToken = default)
        => await this.QueryFirstValueAsync<long>("COUNT(DISTINCT {0})", fieldExpr, cancellationToken);
    public TField Sum<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr)
        => this.QueryFirstValue<TField>("SUM({0})", fieldExpr);
    public async Task<TField> SumAsync<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr, CancellationToken cancellationToken = default)
        => await this.QueryFirstValueAsync<TField>("SUM({0})", fieldExpr, cancellationToken);
    public TTarget SumAs<TField, TTarget>(Expression<Func<<#=tables#>, TField>> fieldExpr)
        => this.QueryFirstValue<TTarget>("SUM({0})", fieldExpr);
    public async Task<TTarget> SumAsAsync<TField, TTarget>(Expression<Func<<#=tables#>, TField>> fieldExpr, CancellationToken cancellationToken = default)
        => await this.QueryFirstValueAsync<TTarget>("SUM({0})", fieldExpr, cancellationToken);
    public TField Avg<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr)
        => this.QueryFirstValue<TField>("AVG({0})", fieldExpr);
    public async Task<TField> AvgAsync<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr, CancellationToken cancellationToken = default)
        => await this.QueryFirstValueAsync<TField>("AVG({0})", fieldExpr, cancellationToken);
    public TTarget AvgAs<TField, TTarget>(Expression<Func<<#=tables#>, TField>> fieldExpr)
    {
        var castTo = this.connection.OrmProvider.CastTo(typeof(TTarget));
        return this.QueryFirstValue<TTarget>($"AVG(CAST({{0}} AS {castTo}))", fieldExpr);
    }
    public async Task<TTarget> AvgAsAsync<TField, TTarget>(Expression<Func<<#=tables#>, TField>> fieldExpr, CancellationToken cancellationToken = default)
    {
        var castTo = this.connection.OrmProvider.CastTo(typeof(TTarget));
        return await this.QueryFirstValueAsync<TTarget>($"AVG(CAST({{0}} AS {castTo}))", fieldExpr, cancellationToken);
    }
    public TField Max<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr)
        => this.QueryFirstValue<TField>("MAX({0})", fieldExpr);
    public async Task<TField> MaxAsync<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr, CancellationToken cancellationToken = default)
        => await this.QueryFirstValueAsync<TField>("MAX({0})", fieldExpr, cancellationToken);
    public TTarget MaxAs<TField, TTarget>(Expression<Func<<#=tables#>, TField>> fieldExpr)
    {
        var castTo = this.connection.OrmProvider.CastTo(typeof(TTarget));
        return this.QueryFirstValue<TTarget>($"MAX(CAST({{0}} AS {castTo}))", fieldExpr);
    }
    public async Task<TTarget> MaxAsAsync<TField, TTarget>(Expression<Func<<#=tables#>, TField>> fieldExpr, CancellationToken cancellationToken = default)
    {
        var castTo = this.connection.OrmProvider.CastTo(typeof(TTarget));
        return await this.QueryFirstValueAsync<TTarget>($"MAX(CAST({{0}} AS {castTo}))", fieldExpr, cancellationToken);
    }
    public TField Min<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr)
        => this.QueryFirstValue<TField>("MIN({0})", fieldExpr);
    public async Task<TField> MinAsync<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr, CancellationToken cancellationToken = default)
        => await this.QueryFirstValueAsync<TField>("MIN({0})", fieldExpr, cancellationToken);
    public TTarget MinAs<TField, TTarget>(Expression<Func<<#=tables#>, TField>> fieldExpr)
    {
        var castTo = this.connection.OrmProvider.CastTo(typeof(TTarget));
        return this.QueryFirstValue<TTarget>($"MIN(CAST({{0}} AS {castTo}))", fieldExpr);
    }
    public async Task<TTarget> MinAsAsync<TField, TTarget>(Expression<Func<<#=tables#>, TField>> fieldExpr, CancellationToken cancellationToken = default)
    {
        var castTo = this.connection.OrmProvider.CastTo(typeof(TTarget));
        return await this.QueryFirstValueAsync<TTarget>($"MIN(CAST({{0}} AS {castTo}))", fieldExpr, cancellationToken);
    }
    public string ToSql(out List<IDbDataParameter> dbParameters)
        => this.visitor.BuildSql(null, out dbParameters, out _);
    private TTarget QueryFirstValue<TTarget>(string sqlFormat, Expression fieldExpr = null)
    {
        this.visitor.Select(sqlFormat, fieldExpr);
        var sql = this.visitor.BuildSql(out var dbParameters, out _);
        var command = this.connection.CreateCommand();
        command.CommandText = sql;
        command.CommandType = CommandType.Text;
        command.Transaction = this.transaction;

        if (dbParameters != null && dbParameters.Count > 0)
            dbParameters.ForEach(f => command.Parameters.Add(f));

        connection.Open();
        var behavior = CommandBehavior.SequentialAccess | CommandBehavior.SingleResult | CommandBehavior.SingleRow;
        using var reader = command.ExecuteReader(behavior);
        object result = null;
        if (reader.Read()) 
            result = reader.GetValue(0);
        reader.Close();
        reader.Dispose();
        if (result is DBNull) return default;
        return (TTarget)result;
    }
    private async Task<TTarget> QueryFirstValueAsync<TTarget>(string sqlFormat, Expression fieldExpr = null, CancellationToken cancellationToken = default)
    {
        this.visitor.Select(sqlFormat, fieldExpr);
        var sql = this.visitor.BuildSql(out var dbParameters, out _);
        var cmd = this.connection.CreateCommand();
        cmd.CommandText = sql;
        cmd.CommandType = CommandType.Text;
        cmd.Transaction = this.transaction;

        if (dbParameters != null && dbParameters.Count > 0)
            dbParameters.ForEach(f => cmd.Parameters.Add(f));

        if (cmd is not DbCommand command)
            throw new NotSupportedException("当前数据库驱动不支持异步SQL查询");

        object result = null;
        var behavior = CommandBehavior.SequentialAccess | CommandBehavior.SingleResult | CommandBehavior.SingleRow;
        await connection.OpenAsync(cancellationToken);
        using var reader = await command.ExecuteReaderAsync(behavior, cancellationToken);
        if (await reader.ReadAsync(cancellationToken))
            result = reader.GetValue(0);
        await reader.CloseAsync();
        await reader.DisposeAsync();
        if (result is DBNull) return default;
        return (TTarget)result;
    }
}
<#  }
    tables += $", T{count}";
#>
class Query<<#=tables#>> : IQuery<<#=tables#>>
{
    private int withIndex = 0;
    private int unionIndex = 0;
    protected readonly IOrmDbFactory dbFactory;
    protected readonly TheaConnection connection;
    protected readonly IDbTransaction transaction;
    protected readonly QueryVisitor visitor;

    public Query(QueryVisitor visitor)
    {
        this.visitor = visitor;
        this.dbFactory = visitor.dbFactory;
        this.connection = visitor.connection;
        this.transaction = visitor.transaction;        
    }

    #region Include
    public IIncludableQuery<<#=tables#>, TMember> Include<TMember>(Expression<Func<<#=tables#>, TMember>> memberSelector)
    {
        this.visitor.Include(memberSelector);
        return new IncludableQuery<<#=tables#>, TMember>(this.visitor);
    }
    public IIncludableQuery<<#=tables#>, TElment> IncludeMany<TElment>(Expression<Func<<#=tables#>, IEnumerable<TElment>>> memberSelector, Expression<Func<TElment, bool>> filter = null)
    {
        this.visitor.Include(memberSelector, filter);
        return new IncludableQuery<<#=tables#>, TElment>(this.visitor);
    }
    #endregion

    #region Join
    public IQuery<<#=tables#>> InnerJoin(Expression<Func<<#=tables#>, bool>> joinOn)
    {
        this.visitor.Join("INNER JOIN", null, joinOn);
        return this;
    }
    public IQuery<<#=tables#>> LeftJoin(Expression<Func<<#=tables#>, bool>> joinOn)
    {
        this.visitor.Join("LEFT JOIN", null, joinOn);
        return this;
    }
    public IQuery<<#=tables#>> RightJoin(Expression<Func<<#=tables#>, bool>> joinOn)
    {
        this.visitor.Join("RIGHT JOIN", null, joinOn);
        return this;
    }
    #endregion

    #region Union
    public IQuery<<#=tables#>> Union<TOther>(Func<IFromQuery, IQuery<TOther>> subQuery)
    {
        var dbParameters = new List<IDbDataParameter>();
        var sql = this.ToSql(out var parameters);
        if (parameters != null && parameters.Count > 0)
            dbParameters.AddRange(parameters);

        var fromQuery = new FromQuery(this.dbFactory, this.connection, this.transaction, $"p{this.unionIndex++}u");
        var query = subQuery.Invoke(fromQuery);
        sql += " UNION " + query.ToSql(out parameters);
        if (parameters != null && parameters.Count > 0)
            dbParameters.AddRange(parameters);

        this.visitor.Union(typeof(T1), sql, dbParameters);
        return this;
    }
    public IQuery<<#=tables#>> UnionAll<TOther>(Func<IFromQuery, IQuery<TOther>> subQuery)
    {
        var dbParameters = new List<IDbDataParameter>();
        var sql = this.ToSql(out var parameters);
        if (parameters != null && parameters.Count > 0)
            dbParameters.AddRange(parameters);

        var fromQuery = new FromQuery(this.dbFactory, this.connection, this.transaction, $"p{this.unionIndex++}u");
        var query = subQuery.Invoke(fromQuery);
        sql += " UNION ALL " + query.ToSql(out parameters);
        if (parameters != null && parameters.Count > 0)
            dbParameters.AddRange(parameters);

        this.visitor.Union(typeof(T1), sql, dbParameters);
        return this;
    }
    #endregion

    #region Where
    public IQuery<<#=tables#>> Where(Expression<Func<<#=tables#>, bool>> predicate)
    {
        this.visitor.Where(predicate);
        return this;
    }
    public IQuery<<#=tables#>> And(bool condition, Expression<Func<<#=tables#>, bool>> predicate)
    {
        if (condition) 
            this.visitor.And(predicate);
        return this;
    }
    #endregion

    #region GroupBy/OrderBy
    public IGroupingQuery<<#=tables#>, TGrouping> GroupBy<TGrouping>(Expression<Func<<#=tables#>, TGrouping>> groupingExpr)
    {
        this.visitor.GroupBy(groupingExpr);
        return new GroupingQuery<<#=tables#>, TGrouping>(this.visitor);
    }
    public IQuery<<#=tables#>> OrderBy<TFields>(Expression<Func<<#=tables#>, TFields>> fieldsExpr)
    {
        this.visitor.OrderBy("ASC", fieldsExpr);
        return this;
    }
    public IQuery<<#=tables#>> OrderByDescending<TFields>(Expression<Func<<#=tables#>, TFields>> fieldsExpr)
    {
        this.visitor.OrderBy("DESC", fieldsExpr);
        return this;
    }
    #endregion

    public IQuery<<#=tables#>> Distinct()
    {
        this.visitor.Distinct();
        return this;
    }
    public IQuery<<#=tables#>> Skip(int offset)
    {
        this.visitor.Skip(offset);
        return this;
    }
    public IQuery<<#=tables#>> Take(int limit)
    {
        this.visitor.Take(limit);
        return this;
    }
    public IQuery<<#=tables#>> ToChunk(int size)
    {
        throw new NotImplementedException();
    }

    public IQuery<TTarget> Select<TTarget>(Expression<Func<<#=tables#>, TTarget>> fieldsExpr)
    {
        this.visitor.Select(null, fieldsExpr);
        return new Query<TTarget>(this.visitor);
    }

    public int Count() => this.QueryFirstValue<int>("COUNT(1)");
    public async Task<int> CountAsync(CancellationToken cancellationToken = default)
        => await this.QueryFirstValueAsync<int>("COUNT(*)", null, cancellationToken);
    public long LongCount() => this.QueryFirstValue<long>("COUNT(1)");
    public async Task<long> LongCountAsync(CancellationToken cancellationToken = default)
        => await this.QueryFirstValueAsync<long>("COUNT(1)", null, cancellationToken);
    public int Count<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr)
        => this.QueryFirstValue<int>("COUNT({0})", fieldExpr);
    public async Task<int> CountAsync<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr, CancellationToken cancellationToken = default)
        => await this.QueryFirstValueAsync<int>("COUNT({0})", fieldExpr, cancellationToken);
    public int CountDistinct<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr)
        => this.QueryFirstValue<int>("COUNT(DISTINCT {0})", fieldExpr);
    public async Task<int> CountDistinctAsync<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr, CancellationToken cancellationToken = default)
        => await this.QueryFirstValueAsync<int>("COUNT(DISTINCT {0})", fieldExpr, cancellationToken);
    public long LongCount<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr)
        => this.QueryFirstValue<long>("COUNT({0})", fieldExpr);
    public async Task<long> LongCountAsync<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr, CancellationToken cancellationToken = default)
        => await this.QueryFirstValueAsync<long>("COUNT({0})", fieldExpr, cancellationToken);
    public long LongCountDistinct<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr)
        => this.QueryFirstValue<long>("COUNT(DISTINCT {0})", fieldExpr);
    public async Task<long> LongCountDistinctAsync<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr, CancellationToken cancellationToken = default)
        => await this.QueryFirstValueAsync<long>("COUNT(DISTINCT {0})", fieldExpr, cancellationToken);
    public TField Sum<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr)
        => this.QueryFirstValue<TField>("SUM({0})", fieldExpr);
    public async Task<TField> SumAsync<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr, CancellationToken cancellationToken = default)
        => await this.QueryFirstValueAsync<TField>("SUM({0})", fieldExpr, cancellationToken);
    public TTarget SumAs<TField, TTarget>(Expression<Func<<#=tables#>, TField>> fieldExpr)
        => this.QueryFirstValue<TTarget>("SUM({0})", fieldExpr);
    public async Task<TTarget> SumAsAsync<TField, TTarget>(Expression<Func<<#=tables#>, TField>> fieldExpr, CancellationToken cancellationToken = default)
        => await this.QueryFirstValueAsync<TTarget>("SUM({0})", fieldExpr, cancellationToken);
    public TField Avg<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr)
        => this.QueryFirstValue<TField>("AVG({0})", fieldExpr);
    public async Task<TField> AvgAsync<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr, CancellationToken cancellationToken = default)
        => await this.QueryFirstValueAsync<TField>("AVG({0})", fieldExpr, cancellationToken);
    public TTarget AvgAs<TField, TTarget>(Expression<Func<<#=tables#>, TField>> fieldExpr)
    {
        var castTo = this.connection.OrmProvider.CastTo(typeof(TTarget));
        return this.QueryFirstValue<TTarget>($"AVG(CAST({{0}} AS {castTo}))", fieldExpr);
    }
    public async Task<TTarget> AvgAsAsync<TField, TTarget>(Expression<Func<<#=tables#>, TField>> fieldExpr, CancellationToken cancellationToken = default)
    {
        var castTo = this.connection.OrmProvider.CastTo(typeof(TTarget));
        return await this.QueryFirstValueAsync<TTarget>($"AVG(CAST({{0}} AS {castTo}))", fieldExpr, cancellationToken);
    }
    public TField Max<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr)
        => this.QueryFirstValue<TField>("MAX({0})", fieldExpr);
    public async Task<TField> MaxAsync<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr, CancellationToken cancellationToken = default)
        => await this.QueryFirstValueAsync<TField>("MAX({0})", fieldExpr, cancellationToken);
    public TTarget MaxAs<TField, TTarget>(Expression<Func<<#=tables#>, TField>> fieldExpr)
    {
        var castTo = this.connection.OrmProvider.CastTo(typeof(TTarget));
        return this.QueryFirstValue<TTarget>($"MAX(CAST({{0}} AS {castTo}))", fieldExpr);
    }
    public async Task<TTarget> MaxAsAsync<TField, TTarget>(Expression<Func<<#=tables#>, TField>> fieldExpr, CancellationToken cancellationToken = default)
    {
        var castTo = this.connection.OrmProvider.CastTo(typeof(TTarget));
        return await this.QueryFirstValueAsync<TTarget>($"MAX(CAST({{0}} AS {castTo}))", fieldExpr, cancellationToken);
    }
    public TField Min<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr)
        => this.QueryFirstValue<TField>("MIN({0})", fieldExpr);
    public async Task<TField> MinAsync<TField>(Expression<Func<<#=tables#>, TField>> fieldExpr, CancellationToken cancellationToken = default)
        => await this.QueryFirstValueAsync<TField>("MIN({0})", fieldExpr, cancellationToken);
    public TTarget MinAs<TField, TTarget>(Expression<Func<<#=tables#>, TField>> fieldExpr)
    {
        var castTo = this.connection.OrmProvider.CastTo(typeof(TTarget));
        return this.QueryFirstValue<TTarget>($"MIN(CAST({{0}} AS {castTo}))", fieldExpr);
    }
    public async Task<TTarget> MinAsAsync<TField, TTarget>(Expression<Func<<#=tables#>, TField>> fieldExpr, CancellationToken cancellationToken = default)
    {
        var castTo = this.connection.OrmProvider.CastTo(typeof(TTarget));
        return await this.QueryFirstValueAsync<TTarget>($"MIN(CAST({{0}} AS {castTo}))", fieldExpr, cancellationToken);
    }
    public string ToSql(out List<IDbDataParameter> dbParameters)
        => this.visitor.BuildSql(null, out dbParameters, out _);
    private TTarget QueryFirstValue<TTarget>(string sqlFormat, Expression fieldExpr = null)
    {
        this.visitor.Select(sqlFormat, fieldExpr);
        var sql = this.visitor.BuildSql(out var dbParameters, out _);
        var command = this.connection.CreateCommand();
        command.CommandText = sql;
        command.CommandType = CommandType.Text;
        command.Transaction = this.transaction;

        if (dbParameters != null && dbParameters.Count > 0)
            dbParameters.ForEach(f => command.Parameters.Add(f));

        connection.Open();
        var behavior = CommandBehavior.SequentialAccess | CommandBehavior.SingleResult | CommandBehavior.SingleRow;
        using var reader = command.ExecuteReader(behavior);
        object result = null;
        if (reader.Read())
            result = reader.GetValue(0);
        reader.Close();
        reader.Dispose();
        if (result is DBNull) return default;
        return (TTarget)result;
    }
    private async Task<TTarget> QueryFirstValueAsync<TTarget>(string sqlFormat, Expression fieldExpr = null, CancellationToken cancellationToken = default)
    {
        this.visitor.Select(sqlFormat, fieldExpr);
        var sql = this.visitor.BuildSql(out var dbParameters, out _);
        var cmd = this.connection.CreateCommand();
        cmd.CommandText = sql;
        cmd.CommandType = CommandType.Text;
        cmd.Transaction = this.transaction;

        if (dbParameters != null && dbParameters.Count > 0)
            dbParameters.ForEach(f => cmd.Parameters.Add(f));

        if (cmd is not DbCommand command)
            throw new NotSupportedException("当前数据库驱动不支持异步SQL查询");

        object result = null;
        var behavior = CommandBehavior.SequentialAccess | CommandBehavior.SingleResult | CommandBehavior.SingleRow;
        await connection.OpenAsync(cancellationToken);
        using var reader = await command.ExecuteReaderAsync(behavior, cancellationToken);
        if (await reader.ReadAsync(cancellationToken))
            result = reader.GetValue(0);
        await reader.CloseAsync();
        await reader.DisposeAsync();
        if (result is DBNull) return default;
        return (TTarget)result;
    }
}